// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pagination {
    #[prost(int64, tag="1")]
    pub total_count: i64,
    #[prost(int32, tag="2")]
    pub page: i32,
    #[prost(int32, tag="3")]
    pub page_size: i32,
    #[prost(int32, tag="4")]
    pub last_page: i32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AddressStatus {
    Unspecified = 0,
    Disabled = 1,
    Enabled = 2,
}
impl AddressStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AddressStatus::Unspecified => "ADDRESS_STATUS_UNSPECIFIED",
            AddressStatus::Disabled => "ADDRESS_STATUS_DISABLED",
            AddressStatus::Enabled => "ADDRESS_STATUS_ENABLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ADDRESS_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "ADDRESS_STATUS_DISABLED" => Some(Self::Disabled),
            "ADDRESS_STATUS_ENABLED" => Some(Self::Enabled),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OrderType {
    Unspecified = 0,
    TronEnergyDelegation = 1,
    TronBandwidthDelegation = 2,
    TronAddressActivation = 3,
}
impl OrderType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            OrderType::Unspecified => "ORDER_TYPE_UNSPECIFIED",
            OrderType::TronEnergyDelegation => "ORDER_TYPE_TRON_ENERGY_DELEGATION",
            OrderType::TronBandwidthDelegation => "ORDER_TYPE_TRON_BANDWIDTH_DELEGATION",
            OrderType::TronAddressActivation => "ORDER_TYPE_TRON_ADDRESS_ACTIVATION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ORDER_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "ORDER_TYPE_TRON_ENERGY_DELEGATION" => Some(Self::TronEnergyDelegation),
            "ORDER_TYPE_TRON_BANDWIDTH_DELEGATION" => Some(Self::TronBandwidthDelegation),
            "ORDER_TYPE_TRON_ADDRESS_ACTIVATION" => Some(Self::TronAddressActivation),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OrderStatus {
    Unspecified = 0,
    Pending = 1,
    InProgress = 2,
    Fulfilled = 3,
    Completed = 4,
    Failed = 5,
    Cancelled = 6,
}
impl OrderStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            OrderStatus::Unspecified => "ORDER_STATUS_UNSPECIFIED",
            OrderStatus::Pending => "ORDER_STATUS_PENDING",
            OrderStatus::InProgress => "ORDER_STATUS_IN_PROGRESS",
            OrderStatus::Fulfilled => "ORDER_STATUS_FULFILLED",
            OrderStatus::Completed => "ORDER_STATUS_COMPLETED",
            OrderStatus::Failed => "ORDER_STATUS_FAILED",
            OrderStatus::Cancelled => "ORDER_STATUS_CANCELLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ORDER_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "ORDER_STATUS_PENDING" => Some(Self::Pending),
            "ORDER_STATUS_IN_PROGRESS" => Some(Self::InProgress),
            "ORDER_STATUS_FULFILLED" => Some(Self::Fulfilled),
            "ORDER_STATUS_COMPLETED" => Some(Self::Completed),
            "ORDER_STATUS_FAILED" => Some(Self::Failed),
            "ORDER_STATUS_CANCELLED" => Some(Self::Cancelled),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ResourceType {
    Unspecified = 0,
    TronBandwidth = 1,
    TronEnergy = 2,
}
impl ResourceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ResourceType::Unspecified => "RESOURCE_TYPE_UNSPECIFIED",
            ResourceType::TronBandwidth => "RESOURCE_TYPE_TRON_BANDWIDTH",
            ResourceType::TronEnergy => "RESOURCE_TYPE_TRON_ENERGY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RESOURCE_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "RESOURCE_TYPE_TRON_BANDWIDTH" => Some(Self::TronBandwidth),
            "RESOURCE_TYPE_TRON_ENERGY" => Some(Self::TronEnergy),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ResourceKind {
    Unspecified = 0,
    Delegation = 1,
    ContractExecution = 2,
    TransactionExecution = 3,
}
impl ResourceKind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ResourceKind::Unspecified => "RESOURCE_KIND_UNSPECIFIED",
            ResourceKind::Delegation => "RESOURCE_KIND_DELEGATION",
            ResourceKind::ContractExecution => "RESOURCE_KIND_CONTRACT_EXECUTION",
            ResourceKind::TransactionExecution => "RESOURCE_KIND_TRANSACTION_EXECUTION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RESOURCE_KIND_UNSPECIFIED" => Some(Self::Unspecified),
            "RESOURCE_KIND_DELEGATION" => Some(Self::Delegation),
            "RESOURCE_KIND_CONTRACT_EXECUTION" => Some(Self::ContractExecution),
            "RESOURCE_KIND_TRANSACTION_EXECUTION" => Some(Self::TransactionExecution),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReservationStatus {
    Unspecified = 0,
    Unconfirmed = 1,
    Confirmed = 2,
    Cancelled = 3,
    Completed = 4,
}
impl ReservationStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ReservationStatus::Unspecified => "RESERVATION_STATUS_UNSPECIFIED",
            ReservationStatus::Unconfirmed => "RESERVATION_STATUS_UNCONFIRMED",
            ReservationStatus::Confirmed => "RESERVATION_STATUS_CONFIRMED",
            ReservationStatus::Cancelled => "RESERVATION_STATUS_CANCELLED",
            ReservationStatus::Completed => "RESERVATION_STATUS_COMPLETED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RESERVATION_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "RESERVATION_STATUS_UNCONFIRMED" => Some(Self::Unconfirmed),
            "RESERVATION_STATUS_CONFIRMED" => Some(Self::Confirmed),
            "RESERVATION_STATUS_CANCELLED" => Some(Self::Cancelled),
            "RESERVATION_STATUS_COMPLETED" => Some(Self::Completed),
            _ => None,
        }
    }
}
/// Encoded file descriptor set for the `manager.common.v1` package
pub const FILE_DESCRIPTOR_SET: &[u8] = &[
    0x0a, 0x81, 0x16, 0x0a, 0x1e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d,
    0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
    0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x22, 0x7b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
    0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
    0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
    0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
    0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
    0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
    0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x50,
    0x61, 0x67, 0x65, 0x2a, 0x68, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74,
    0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
    0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
    0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
    0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
    0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41,
    0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xa0, 0x01,
    0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4f,
    0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
    0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x52, 0x44, 0x45, 0x52,
    0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47,
    0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x28,
    0x0a, 0x24, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x4f,
    0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x4c, 0x45,
    0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x52, 0x44, 0x45,
    0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x52,
    0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
    0x2a, 0xd0, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
    0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
    0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
    0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
    0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45,
    0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47,
    0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
    0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44,
    0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
    0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x17,
    0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
    0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52,
    0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
    0x44, 0x10, 0x06, 0x2a, 0x6e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
    0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
    0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
    0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
    0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44,
    0x54, 0x48, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
    0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47,
    0x59, 0x10, 0x02, 0x2a, 0x9a, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
    0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
    0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
    0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
    0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
    0x01, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49,
    0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43,
    0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x4f, 0x55,
    0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
    0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
    0x2a, 0xc1, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
    0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
    0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45,
    0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
    0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x12, 0x20,
    0x0a, 0x1c, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
    0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x02,
    0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
    0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
    0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f,
    0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
    0x45, 0x44, 0x10, 0x04, 0x42, 0xc8, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x6e,
    0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0b,
    0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3c, 0x67,
    0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x76, 0x2d, 0x6e, 0x65, 0x74,
    0x2f, 0x64, 0x76, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
    0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
    0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4d, 0x43,
    0x58, 0xaa, 0x02, 0x11, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
    0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x11, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c,
    0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1d, 0x4d, 0x61, 0x6e, 0x61,
    0x67, 0x65, 0x72, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
    0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x4d, 0x61, 0x6e, 0x61,
    0x67, 0x65, 0x72, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x4a,
    0xca, 0x0b, 0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x35, 0x01, 0x0a, 0x08, 0x0a, 0x01, 0x0c, 0x12,
    0x03, 0x00, 0x00, 0x12, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x02, 0x00, 0x1a, 0x0a, 0x0a,
    0x0a, 0x02, 0x05, 0x00, 0x12, 0x04, 0x04, 0x00, 0x08, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x00,
    0x01, 0x12, 0x03, 0x04, 0x05, 0x12, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x00, 0x12, 0x03,
    0x05, 0x08, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x05, 0x08,
    0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x05, 0x25, 0x26, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x01, 0x12, 0x03, 0x06, 0x08, 0x24, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x06, 0x08, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00,
    0x02, 0x01, 0x02, 0x12, 0x03, 0x06, 0x22, 0x23, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x02,
    0x12, 0x03, 0x07, 0x08, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03,
    0x07, 0x08, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x07, 0x21,
    0x22, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x01, 0x12, 0x04, 0x0a, 0x00, 0x0f, 0x01, 0x0a, 0x0a, 0x0a,
    0x03, 0x05, 0x01, 0x01, 0x12, 0x03, 0x0a, 0x05, 0x0e, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02,
    0x00, 0x12, 0x03, 0x0b, 0x08, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x0b, 0x08, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x00, 0x02, 0x12, 0x03, 0x0b,
    0x21, 0x22, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x01, 0x12, 0x03, 0x0c, 0x08, 0x2e, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x0c, 0x08, 0x29, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x01, 0x02, 0x01, 0x02, 0x12, 0x03, 0x0c, 0x2c, 0x2d, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x01, 0x02, 0x02, 0x12, 0x03, 0x0d, 0x08, 0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x02,
    0x01, 0x12, 0x03, 0x0d, 0x08, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x02, 0x02, 0x12,
    0x03, 0x0d, 0x2f, 0x30, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x03, 0x12, 0x03, 0x0e, 0x08,
    0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x03, 0x01, 0x12, 0x03, 0x0e, 0x08, 0x2a, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x03, 0x02, 0x12, 0x03, 0x0e, 0x2d, 0x2e, 0x0a, 0x0a, 0x0a,
    0x02, 0x05, 0x02, 0x12, 0x04, 0x11, 0x00, 0x19, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x02, 0x01,
    0x12, 0x03, 0x11, 0x05, 0x10, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x00, 0x12, 0x03, 0x12,
    0x08, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x12, 0x08, 0x20,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x00, 0x02, 0x12, 0x03, 0x12, 0x23, 0x24, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x02, 0x02, 0x01, 0x12, 0x03, 0x13, 0x08, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x02, 0x02, 0x01, 0x01, 0x12, 0x03, 0x13, 0x08, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02,
    0x01, 0x02, 0x12, 0x03, 0x13, 0x1f, 0x20, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x02, 0x12,
    0x03, 0x14, 0x08, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x02, 0x01, 0x12, 0x03, 0x14,
    0x08, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x02, 0x02, 0x12, 0x03, 0x14, 0x23, 0x24,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x03, 0x12, 0x03, 0x15, 0x08, 0x23, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x02, 0x02, 0x03, 0x01, 0x12, 0x03, 0x15, 0x08, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x02, 0x02, 0x03, 0x02, 0x12, 0x03, 0x15, 0x21, 0x22, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02,
    0x04, 0x12, 0x03, 0x16, 0x08, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x04, 0x01, 0x12,
    0x03, 0x16, 0x08, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x04, 0x02, 0x12, 0x03, 0x16,
    0x21, 0x22, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x05, 0x12, 0x03, 0x17, 0x08, 0x20, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x05, 0x01, 0x12, 0x03, 0x17, 0x08, 0x1b, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x02, 0x02, 0x05, 0x02, 0x12, 0x03, 0x17, 0x1e, 0x1f, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x02, 0x02, 0x06, 0x12, 0x03, 0x18, 0x08, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x06,
    0x01, 0x12, 0x03, 0x18, 0x08, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x06, 0x02, 0x12,
    0x03, 0x18, 0x21, 0x22, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x03, 0x12, 0x04, 0x1b, 0x00, 0x1f, 0x01,
    0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x03, 0x01, 0x12, 0x03, 0x1b, 0x05, 0x11, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x03, 0x02, 0x00, 0x12, 0x03, 0x1c, 0x08, 0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x1c, 0x08, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x00, 0x02,
    0x12, 0x03, 0x1c, 0x24, 0x25, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x01, 0x12, 0x03, 0x1d,
    0x08, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x01, 0x01, 0x12, 0x03, 0x1d, 0x08, 0x24,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x01, 0x02, 0x12, 0x03, 0x1d, 0x27, 0x28, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x03, 0x02, 0x02, 0x12, 0x03, 0x1e, 0x08, 0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x03, 0x02, 0x02, 0x01, 0x12, 0x03, 0x1e, 0x08, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02,
    0x02, 0x02, 0x12, 0x03, 0x1e, 0x24, 0x25, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x04, 0x12, 0x04, 0x21,
    0x00, 0x26, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x04, 0x01, 0x12, 0x03, 0x21, 0x05, 0x11, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x00, 0x12, 0x03, 0x22, 0x08, 0x26, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x04, 0x02, 0x00, 0x01, 0x12, 0x03, 0x22, 0x08, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04,
    0x02, 0x00, 0x02, 0x12, 0x03, 0x22, 0x24, 0x25, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x01,
    0x12, 0x03, 0x23, 0x08, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x01, 0x01, 0x12, 0x03,
    0x23, 0x08, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x01, 0x02, 0x12, 0x03, 0x23, 0x23,
    0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x02, 0x12, 0x03, 0x24, 0x08, 0x2d, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x04, 0x02, 0x02, 0x01, 0x12, 0x03, 0x24, 0x08, 0x28, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x04, 0x02, 0x02, 0x02, 0x12, 0x03, 0x24, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04,
    0x02, 0x03, 0x12, 0x03, 0x25, 0x08, 0x30, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x03, 0x01,
    0x12, 0x03, 0x25, 0x08, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x03, 0x02, 0x12, 0x03,
    0x25, 0x2e, 0x2f, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x05, 0x12, 0x04, 0x28, 0x00, 0x2e, 0x01, 0x0a,
    0x0a, 0x0a, 0x03, 0x05, 0x05, 0x01, 0x12, 0x03, 0x28, 0x05, 0x16, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x05, 0x02, 0x00, 0x12, 0x03, 0x29, 0x08, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x29, 0x08, 0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x00, 0x02, 0x12,
    0x03, 0x29, 0x29, 0x2a, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x01, 0x12, 0x03, 0x2a, 0x08,
    0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x01, 0x01, 0x12, 0x03, 0x2a, 0x08, 0x26, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x01, 0x02, 0x12, 0x03, 0x2a, 0x29, 0x2a, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x05, 0x02, 0x02, 0x12, 0x03, 0x2b, 0x08, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05,
    0x02, 0x02, 0x01, 0x12, 0x03, 0x2b, 0x08, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x02,
    0x02, 0x12, 0x03, 0x2b, 0x27, 0x28, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x03, 0x12, 0x03,
    0x2c, 0x08, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x03, 0x01, 0x12, 0x03, 0x2c, 0x08,
    0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x03, 0x02, 0x12, 0x03, 0x2c, 0x27, 0x28, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x04, 0x12, 0x03, 0x2d, 0x08, 0x29, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x05, 0x02, 0x04, 0x01, 0x12, 0x03, 0x2d, 0x08, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05,
    0x02, 0x04, 0x02, 0x12, 0x03, 0x2d, 0x27, 0x28, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04,
    0x30, 0x00, 0x35, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x30, 0x08, 0x12,
    0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x31, 0x08, 0x1e, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x31, 0x08, 0x0d, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x31, 0x0e, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x00, 0x03, 0x12, 0x03, 0x31, 0x1c, 0x1d, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12,
    0x03, 0x32, 0x08, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x32,
    0x08, 0x0d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x32, 0x0e, 0x12,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x32, 0x15, 0x16, 0x0a, 0x0b,
    0x0a, 0x04, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x33, 0x08, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x02, 0x05, 0x12, 0x03, 0x33, 0x08, 0x0d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x02, 0x01, 0x12, 0x03, 0x33, 0x0e, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03,
    0x12, 0x03, 0x33, 0x1a, 0x1b, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x34,
    0x08, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x05, 0x12, 0x03, 0x34, 0x08, 0x0d,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x34, 0x0e, 0x17, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x34, 0x1a, 0x1b, 0x62, 0x06, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x33,
];
include!("manager.common.v1.serde.rs");
// @@protoc_insertion_point(module)