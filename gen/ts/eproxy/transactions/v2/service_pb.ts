// @generated by protoc-gen-es v2.5.2 with parameter "target=ts"
// @generated from file eproxy/transactions/v2/service.proto (package eproxy.transactions.v2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_google_api_field_behavior } from "../../../google/api/field_behavior_pb";
import type { Blockchain, FindRequestCommon } from "../../common/v2/common_pb";
import { file_eproxy_common_v2_common } from "../../common/v2/common_pb";
import type { Transaction } from "./transaction_pb";
import { file_eproxy_transactions_v2_transaction } from "./transaction_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file eproxy/transactions/v2/service.proto.
 */
export const file_eproxy_transactions_v2_service: GenFile = /*@__PURE__*/
  fileDesc("CiRlcHJveHkvdHJhbnNhY3Rpb25zL3YyL3NlcnZpY2UucHJvdG8SFmVwcm94eS50cmFuc2FjdGlvbnMudjIiWgoOR2V0SW5mb1JlcXVlc3QSNQoKYmxvY2tjaGFpbhgBIAEoDjIcLmVwcm94eS5jb21tb24udjIuQmxvY2tjaGFpbkID4EECEhEKBGhhc2gYAiABKAlCA+BBAiJLCg9HZXRJbmZvUmVzcG9uc2USOAoLdHJhbnNhY3Rpb24YASABKAsyIy5lcHJveHkudHJhbnNhY3Rpb25zLnYyLlRyYW5zYWN0aW9uIoYHCgtGaW5kUmVxdWVzdBI1CgpibG9ja2NoYWluGAEgASgOMhwuZXByb3h5LmNvbW1vbi52Mi5CbG9ja2NoYWluQgPgQQISOAoGY29tbW9uGAIgASgLMiMuZXByb3h5LmNvbW1vbi52Mi5GaW5kUmVxdWVzdENvbW1vbkID4EECEhMKBnNlYXJjaBgDIAEoCUgAiAEBEhEKBGhhc2gYBCABKAlIAYgBARIZCgxibG9ja19oZWlnaHQYBSABKARIAogBARIgChNibG9ja19oZWlnaHRfb2Zmc2V0GAYgASgESAOIAQESFAoHYWRkcmVzcxgHIAEoCUgEiAEBEh0KEGNvbnRyYWN0X2FkZHJlc3MYCCABKAlIBYgBARIaCg1jb250cmFjdF90eXBlGAkgASgNSAaIAQESIgoaaXNfaW5jbHVkZV9hZGRpdGlvbmFsX2RhdGEYCiABKAgSSAoLdHJvbl9wYXJhbXMYCyABKAsyLi5lcHJveHkudHJhbnNhY3Rpb25zLnYyLkZpbmRSZXF1ZXN0LlRyb25QYXJhbXNIB4gBARJGCgpldm1fcGFyYW1zGAwgASgLMi0uZXByb3h5LnRyYW5zYWN0aW9ucy52Mi5GaW5kUmVxdWVzdC5FVk1QYXJhbXNICIgBARJXChNiaXRjb2luX2xpa2VfcGFyYW1zGA0gASgLMjUuZXByb3h5LnRyYW5zYWN0aW9ucy52Mi5GaW5kUmVxdWVzdC5CaXRjb2luTGlrZVBhcmFtc0gJiAEBGgwKClRyb25QYXJhbXMaCwoJRVZNUGFyYW1zGn8KEUJpdGNvaW5MaWtlUGFyYW1zEh4KEWZpbHRlcl9ieV9hZGRyZXNzGAEgASgISACIAQESHgoRZmlsdGVyX2J5X21lbXBvb2wYAiABKAhIAYgBAUIUChJfZmlsdGVyX2J5X2FkZHJlc3NCFAoSX2ZpbHRlcl9ieV9tZW1wb29sQgkKB19zZWFyY2hCBwoFX2hhc2hCDwoNX2Jsb2NrX2hlaWdodEIWChRfYmxvY2tfaGVpZ2h0X29mZnNldEIKCghfYWRkcmVzc0ITChFfY29udHJhY3RfYWRkcmVzc0IQCg5fY29udHJhY3RfdHlwZUIOCgxfdHJvbl9wYXJhbXNCDQoLX2V2bV9wYXJhbXNCFgoUX2JpdGNvaW5fbGlrZV9wYXJhbXMiXAoMRmluZFJlc3BvbnNlEjIKBWl0ZW1zGAEgAygLMiMuZXByb3h5LnRyYW5zYWN0aW9ucy52Mi5UcmFuc2FjdGlvbhIYChBuZXh0X3BhZ2VfZXhpc3RzGAIgASgIImUKE1N1Z2dlc3RUeEZlZVJlcXVlc3QSNQoKYmxvY2tjaGFpbhgBIAEoDjIcLmVwcm94eS5jb21tb24udjIuQmxvY2tjaGFpbkID4EECEhcKCmlkZW50aWZpZXIYAiABKAlCA+BBAiL4AwoUU3VnZ2VzdFR4RmVlUmVzcG9uc2USCwoDZmVlGAEgASgJEk0KCXRyb25fZGF0YRgCIAEoCzI4LmVwcm94eS50cmFuc2FjdGlvbnMudjIuU3VnZ2VzdFR4RmVlUmVzcG9uc2UuVHJvbkZlZURhdGFIABJLCghldm1fZGF0YRgDIAEoCzI3LmVwcm94eS50cmFuc2FjdGlvbnMudjIuU3VnZ2VzdFR4RmVlUmVzcG9uc2UuRVZNRmVlRGF0YUgAElwKEWJpdGNvaW5fbGlrZV9kYXRhGAQgASgLMj8uZXByb3h5LnRyYW5zYWN0aW9ucy52Mi5TdWdnZXN0VHhGZWVSZXNwb25zZS5CaXRjb2luTGlrZUZlZURhdGFIABpSCgtUcm9uRmVlRGF0YRIUCgxlbmVyZ3lfdXNhZ2UYASABKAQSFwoPYmFuZHdpZHRoX3VzYWdlGAIgASgEEhQKDGJ1cm5fdHJ4X2ZlZRgDIAEoCRoMCgpFVk1GZWVEYXRhGmQKEkJpdGNvaW5MaWtlRmVlRGF0YRIQCghmZWVfcmF0ZRgBIAEoBBIWCg5lc3RpbWF0ZWRfc2l6ZRgCIAEoDRIQCghwcmlvcml0eRgDIAEoCRISCgp1dHhvX2NvdW50GAQgASgNQhEKD2FkZGl0aW9uYWxfZGF0YTKvAgoTVHJhbnNhY3Rpb25zU2VydmljZRJRCgRGaW5kEiMuZXByb3h5LnRyYW5zYWN0aW9ucy52Mi5GaW5kUmVxdWVzdBokLmVwcm94eS50cmFuc2FjdGlvbnMudjIuRmluZFJlc3BvbnNlEloKB0dldEluZm8SJi5lcHJveHkudHJhbnNhY3Rpb25zLnYyLkdldEluZm9SZXF1ZXN0GicuZXByb3h5LnRyYW5zYWN0aW9ucy52Mi5HZXRJbmZvUmVzcG9uc2USaQoMU3VnZ2VzdFR4RmVlEisuZXByb3h5LnRyYW5zYWN0aW9ucy52Mi5TdWdnZXN0VHhGZWVSZXF1ZXN0GiwuZXByb3h5LnRyYW5zYWN0aW9ucy52Mi5TdWdnZXN0VHhGZWVSZXNwb25zZULtAQoaY29tLmVwcm94eS50cmFuc2FjdGlvbnMudjJCDFNlcnZpY2VQcm90b1ABWkdnaXRodWIuY29tL2R2LW5ldC9kdi1wcm90by9nZW4vZ28vZXByb3h5L3RyYW5zYWN0aW9ucy92Mjt0cmFuc2FjdGlvbnN2MqICA0VUWKoCFkVwcm94eS5UcmFuc2FjdGlvbnMuVjLKAhZFcHJveHlcVHJhbnNhY3Rpb25zXFYy4gIiRXByb3h5XFRyYW5zYWN0aW9uc1xWMlxHUEJNZXRhZGF0YeoCGEVwcm94eTo6VHJhbnNhY3Rpb25zOjpWMmIGcHJvdG8z", [file_google_api_field_behavior, file_eproxy_common_v2_common, file_eproxy_transactions_v2_transaction]);

/**
 * @generated from message eproxy.transactions.v2.GetInfoRequest
 */
export type GetInfoRequest = Message<"eproxy.transactions.v2.GetInfoRequest"> & {
  /**
   * @generated from field: eproxy.common.v2.Blockchain blockchain = 1;
   */
  blockchain: Blockchain;

  /**
   * @generated from field: string hash = 2;
   */
  hash: string;
};

/**
 * Describes the message eproxy.transactions.v2.GetInfoRequest.
 * Use `create(GetInfoRequestSchema)` to create a new message.
 */
export const GetInfoRequestSchema: GenMessage<GetInfoRequest> = /*@__PURE__*/
  messageDesc(file_eproxy_transactions_v2_service, 0);

/**
 * @generated from message eproxy.transactions.v2.GetInfoResponse
 */
export type GetInfoResponse = Message<"eproxy.transactions.v2.GetInfoResponse"> & {
  /**
   * @generated from field: eproxy.transactions.v2.Transaction transaction = 1;
   */
  transaction?: Transaction;
};

/**
 * Describes the message eproxy.transactions.v2.GetInfoResponse.
 * Use `create(GetInfoResponseSchema)` to create a new message.
 */
export const GetInfoResponseSchema: GenMessage<GetInfoResponse> = /*@__PURE__*/
  messageDesc(file_eproxy_transactions_v2_service, 1);

/**
 * Find request
 *
 * @generated from message eproxy.transactions.v2.FindRequest
 */
export type FindRequest = Message<"eproxy.transactions.v2.FindRequest"> & {
  /**
   * @generated from field: eproxy.common.v2.Blockchain blockchain = 1;
   */
  blockchain: Blockchain;

  /**
   * @generated from field: eproxy.common.v2.FindRequestCommon common = 2;
   */
  common?: FindRequestCommon;

  /**
   * @generated from field: optional string search = 3;
   */
  search?: string;

  /**
   * @generated from field: optional string hash = 4;
   */
  hash?: string;

  /**
   * @generated from field: optional uint64 block_height = 5;
   */
  blockHeight?: bigint;

  /**
   * @generated from field: optional uint64 block_height_offset = 6;
   */
  blockHeightOffset?: bigint;

  /**
   * @generated from field: optional string address = 7;
   */
  address?: string;

  /**
   * @generated from field: optional string contract_address = 8;
   */
  contractAddress?: string;

  /**
   * @generated from field: optional uint32 contract_type = 9;
   */
  contractType?: number;

  /**
   * @generated from field: bool is_include_additional_data = 10;
   */
  isIncludeAdditionalData: boolean;

  /**
   * @generated from field: optional eproxy.transactions.v2.FindRequest.TronParams tron_params = 11;
   */
  tronParams?: FindRequest_TronParams;

  /**
   * @generated from field: optional eproxy.transactions.v2.FindRequest.EVMParams evm_params = 12;
   */
  evmParams?: FindRequest_EVMParams;

  /**
   * @generated from field: optional eproxy.transactions.v2.FindRequest.BitcoinLikeParams bitcoin_like_params = 13;
   */
  bitcoinLikeParams?: FindRequest_BitcoinLikeParams;
};

/**
 * Describes the message eproxy.transactions.v2.FindRequest.
 * Use `create(FindRequestSchema)` to create a new message.
 */
export const FindRequestSchema: GenMessage<FindRequest> = /*@__PURE__*/
  messageDesc(file_eproxy_transactions_v2_service, 2);

/**
 * @generated from message eproxy.transactions.v2.FindRequest.TronParams
 */
export type FindRequest_TronParams = Message<"eproxy.transactions.v2.FindRequest.TronParams"> & {
};

/**
 * Describes the message eproxy.transactions.v2.FindRequest.TronParams.
 * Use `create(FindRequest_TronParamsSchema)` to create a new message.
 */
export const FindRequest_TronParamsSchema: GenMessage<FindRequest_TronParams> = /*@__PURE__*/
  messageDesc(file_eproxy_transactions_v2_service, 2, 0);

/**
 * @generated from message eproxy.transactions.v2.FindRequest.EVMParams
 */
export type FindRequest_EVMParams = Message<"eproxy.transactions.v2.FindRequest.EVMParams"> & {
};

/**
 * Describes the message eproxy.transactions.v2.FindRequest.EVMParams.
 * Use `create(FindRequest_EVMParamsSchema)` to create a new message.
 */
export const FindRequest_EVMParamsSchema: GenMessage<FindRequest_EVMParams> = /*@__PURE__*/
  messageDesc(file_eproxy_transactions_v2_service, 2, 1);

/**
 * @generated from message eproxy.transactions.v2.FindRequest.BitcoinLikeParams
 */
export type FindRequest_BitcoinLikeParams = Message<"eproxy.transactions.v2.FindRequest.BitcoinLikeParams"> & {
  /**
   * @generated from field: optional bool filter_by_address = 1;
   */
  filterByAddress?: boolean;

  /**
   * @generated from field: optional bool filter_by_mempool = 2;
   */
  filterByMempool?: boolean;
};

/**
 * Describes the message eproxy.transactions.v2.FindRequest.BitcoinLikeParams.
 * Use `create(FindRequest_BitcoinLikeParamsSchema)` to create a new message.
 */
export const FindRequest_BitcoinLikeParamsSchema: GenMessage<FindRequest_BitcoinLikeParams> = /*@__PURE__*/
  messageDesc(file_eproxy_transactions_v2_service, 2, 2);

/**
 * @generated from message eproxy.transactions.v2.FindResponse
 */
export type FindResponse = Message<"eproxy.transactions.v2.FindResponse"> & {
  /**
   * @generated from field: repeated eproxy.transactions.v2.Transaction items = 1;
   */
  items: Transaction[];

  /**
   * @generated from field: bool next_page_exists = 2;
   */
  nextPageExists: boolean;
};

/**
 * Describes the message eproxy.transactions.v2.FindResponse.
 * Use `create(FindResponseSchema)` to create a new message.
 */
export const FindResponseSchema: GenMessage<FindResponse> = /*@__PURE__*/
  messageDesc(file_eproxy_transactions_v2_service, 3);

/**
 * @generated from message eproxy.transactions.v2.SuggestTxFeeRequest
 */
export type SuggestTxFeeRequest = Message<"eproxy.transactions.v2.SuggestTxFeeRequest"> & {
  /**
   * @generated from field: eproxy.common.v2.Blockchain blockchain = 1;
   */
  blockchain: Blockchain;

  /**
   * @generated from field: string identifier = 2;
   */
  identifier: string;
};

/**
 * Describes the message eproxy.transactions.v2.SuggestTxFeeRequest.
 * Use `create(SuggestTxFeeRequestSchema)` to create a new message.
 */
export const SuggestTxFeeRequestSchema: GenMessage<SuggestTxFeeRequest> = /*@__PURE__*/
  messageDesc(file_eproxy_transactions_v2_service, 4);

/**
 * @generated from message eproxy.transactions.v2.SuggestTxFeeResponse
 */
export type SuggestTxFeeResponse = Message<"eproxy.transactions.v2.SuggestTxFeeResponse"> & {
  /**
   * @generated from field: string fee = 1;
   */
  fee: string;

  /**
   * Additional blockchain-specific data
   *
   * @generated from oneof eproxy.transactions.v2.SuggestTxFeeResponse.additional_data
   */
  additionalData: {
    /**
     * @generated from field: eproxy.transactions.v2.SuggestTxFeeResponse.TronFeeData tron_data = 2;
     */
    value: SuggestTxFeeResponse_TronFeeData;
    case: "tronData";
  } | {
    /**
     * @generated from field: eproxy.transactions.v2.SuggestTxFeeResponse.EVMFeeData evm_data = 3;
     */
    value: SuggestTxFeeResponse_EVMFeeData;
    case: "evmData";
  } | {
    /**
     * @generated from field: eproxy.transactions.v2.SuggestTxFeeResponse.BitcoinLikeFeeData bitcoin_like_data = 4;
     */
    value: SuggestTxFeeResponse_BitcoinLikeFeeData;
    case: "bitcoinLikeData";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message eproxy.transactions.v2.SuggestTxFeeResponse.
 * Use `create(SuggestTxFeeResponseSchema)` to create a new message.
 */
export const SuggestTxFeeResponseSchema: GenMessage<SuggestTxFeeResponse> = /*@__PURE__*/
  messageDesc(file_eproxy_transactions_v2_service, 5);

/**
 * @generated from message eproxy.transactions.v2.SuggestTxFeeResponse.TronFeeData
 */
export type SuggestTxFeeResponse_TronFeeData = Message<"eproxy.transactions.v2.SuggestTxFeeResponse.TronFeeData"> & {
  /**
   * TRC20 token transaction costs
   *
   * Energy consumption for the transaction
   *
   * @generated from field: uint64 energy_usage = 1;
   */
  energyUsage: bigint;

  /**
   * Bandwidth consumption for the transaction
   *
   * @generated from field: uint64 bandwidth_usage = 2;
   */
  bandwidthUsage: bigint;

  /**
   * TRX burned as fee (in TRX)
   *
   * @generated from field: string burn_trx_fee = 3;
   */
  burnTrxFee: string;
};

/**
 * Describes the message eproxy.transactions.v2.SuggestTxFeeResponse.TronFeeData.
 * Use `create(SuggestTxFeeResponse_TronFeeDataSchema)` to create a new message.
 */
export const SuggestTxFeeResponse_TronFeeDataSchema: GenMessage<SuggestTxFeeResponse_TronFeeData> = /*@__PURE__*/
  messageDesc(file_eproxy_transactions_v2_service, 5, 0);

/**
 * EVM-specific fee data fields - empty for now
 *
 * @generated from message eproxy.transactions.v2.SuggestTxFeeResponse.EVMFeeData
 */
export type SuggestTxFeeResponse_EVMFeeData = Message<"eproxy.transactions.v2.SuggestTxFeeResponse.EVMFeeData"> & {
};

/**
 * Describes the message eproxy.transactions.v2.SuggestTxFeeResponse.EVMFeeData.
 * Use `create(SuggestTxFeeResponse_EVMFeeDataSchema)` to create a new message.
 */
export const SuggestTxFeeResponse_EVMFeeDataSchema: GenMessage<SuggestTxFeeResponse_EVMFeeData> = /*@__PURE__*/
  messageDesc(file_eproxy_transactions_v2_service, 5, 1);

/**
 * @generated from message eproxy.transactions.v2.SuggestTxFeeResponse.BitcoinLikeFeeData
 */
export type SuggestTxFeeResponse_BitcoinLikeFeeData = Message<"eproxy.transactions.v2.SuggestTxFeeResponse.BitcoinLikeFeeData"> & {
  /**
   * Fee rate in satoshis per byte
   *
   * @generated from field: uint64 fee_rate = 1;
   */
  feeRate: bigint;

  /**
   * Estimated transaction size in bytes
   *
   * @generated from field: uint32 estimated_size = 2;
   */
  estimatedSize: number;

  /**
   * Priority level: "low", "medium", "high"
   *
   * @generated from field: string priority = 3;
   */
  priority: string;

  /**
   * Number of UTXOs used (affects size calculation)
   *
   * @generated from field: uint32 utxo_count = 4;
   */
  utxoCount: number;
};

/**
 * Describes the message eproxy.transactions.v2.SuggestTxFeeResponse.BitcoinLikeFeeData.
 * Use `create(SuggestTxFeeResponse_BitcoinLikeFeeDataSchema)` to create a new message.
 */
export const SuggestTxFeeResponse_BitcoinLikeFeeDataSchema: GenMessage<SuggestTxFeeResponse_BitcoinLikeFeeData> = /*@__PURE__*/
  messageDesc(file_eproxy_transactions_v2_service, 5, 2);

/**
 * TransactionsService returns information about transactions by hash and
 * address
 *
 * @generated from service eproxy.transactions.v2.TransactionsService
 */
export const TransactionsService: GenService<{
  /**
   * Find returns information about transactions list by hash, address, block
   * height and contract address
   *
   * @generated from rpc eproxy.transactions.v2.TransactionsService.Find
   */
  find: {
    methodKind: "unary";
    input: typeof FindRequestSchema;
    output: typeof FindResponseSchema;
  },
  /**
   * GetInfo returns mixed data about TX by hash.
   *
   * @generated from rpc eproxy.transactions.v2.TransactionsService.GetInfo
   */
  getInfo: {
    methodKind: "unary";
    input: typeof GetInfoRequestSchema;
    output: typeof GetInfoResponseSchema;
  },
  /**
   * SuggestTxFee returns suggested transaction fee for a specific blockchain and identifier.
   *
   * @generated from rpc eproxy.transactions.v2.TransactionsService.SuggestTxFee
   */
  suggestTxFee: {
    methodKind: "unary";
    input: typeof SuggestTxFeeRequestSchema;
    output: typeof SuggestTxFeeResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_eproxy_transactions_v2_service, 0);

