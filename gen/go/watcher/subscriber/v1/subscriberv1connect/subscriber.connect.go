// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: watcher/subscriber/v1/subscriber.proto

package subscriberv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dv-net/dv-proto/gen/go/watcher/subscriber/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SubscriberServiceName is the fully-qualified name of the SubscriberService service.
	SubscriberServiceName = "watcher.subscriber.v1.SubscriberService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SubscriberServiceSubscribeMempoolProcedure is the fully-qualified name of the SubscriberService's
	// SubscribeMempool RPC.
	SubscriberServiceSubscribeMempoolProcedure = "/watcher.subscriber.v1.SubscriberService/SubscribeMempool"
)

// SubscriberServiceClient is a client for the watcher.subscriber.v1.SubscriberService service.
type SubscriberServiceClient interface {
	// Subscribe mempool transactions
	SubscribeMempool(context.Context, *connect.Request[v1.SubscribeMempoolRequest]) (*connect.ServerStreamForClient[v1.SubscribeMempoolResponse], error)
}

// NewSubscriberServiceClient constructs a client for the watcher.subscriber.v1.SubscriberService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubscriberServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SubscriberServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	subscriberServiceMethods := v1.File_watcher_subscriber_v1_subscriber_proto.Services().ByName("SubscriberService").Methods()
	return &subscriberServiceClient{
		subscribeMempool: connect.NewClient[v1.SubscribeMempoolRequest, v1.SubscribeMempoolResponse](
			httpClient,
			baseURL+SubscriberServiceSubscribeMempoolProcedure,
			connect.WithSchema(subscriberServiceMethods.ByName("SubscribeMempool")),
			connect.WithClientOptions(opts...),
		),
	}
}

// subscriberServiceClient implements SubscriberServiceClient.
type subscriberServiceClient struct {
	subscribeMempool *connect.Client[v1.SubscribeMempoolRequest, v1.SubscribeMempoolResponse]
}

// SubscribeMempool calls watcher.subscriber.v1.SubscriberService.SubscribeMempool.
func (c *subscriberServiceClient) SubscribeMempool(ctx context.Context, req *connect.Request[v1.SubscribeMempoolRequest]) (*connect.ServerStreamForClient[v1.SubscribeMempoolResponse], error) {
	return c.subscribeMempool.CallServerStream(ctx, req)
}

// SubscriberServiceHandler is an implementation of the watcher.subscriber.v1.SubscriberService
// service.
type SubscriberServiceHandler interface {
	// Subscribe mempool transactions
	SubscribeMempool(context.Context, *connect.Request[v1.SubscribeMempoolRequest], *connect.ServerStream[v1.SubscribeMempoolResponse]) error
}

// NewSubscriberServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubscriberServiceHandler(svc SubscriberServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	subscriberServiceMethods := v1.File_watcher_subscriber_v1_subscriber_proto.Services().ByName("SubscriberService").Methods()
	subscriberServiceSubscribeMempoolHandler := connect.NewServerStreamHandler(
		SubscriberServiceSubscribeMempoolProcedure,
		svc.SubscribeMempool,
		connect.WithSchema(subscriberServiceMethods.ByName("SubscribeMempool")),
		connect.WithHandlerOptions(opts...),
	)
	return "/watcher.subscriber.v1.SubscriberService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SubscriberServiceSubscribeMempoolProcedure:
			subscriberServiceSubscribeMempoolHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSubscriberServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSubscriberServiceHandler struct{}

func (UnimplementedSubscriberServiceHandler) SubscribeMempool(context.Context, *connect.Request[v1.SubscribeMempoolRequest], *connect.ServerStream[v1.SubscribeMempoolResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("watcher.subscriber.v1.SubscriberService.SubscribeMempool is not implemented"))
}
