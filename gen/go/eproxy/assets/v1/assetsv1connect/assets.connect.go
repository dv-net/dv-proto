// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// eproxy/assets/v1/assets.proto is a deprecated file.

package assetsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dv-net/dv-proto/gen/go/eproxy/assets/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AssetsServiceName is the fully-qualified name of the AssetsService service.
	AssetsServiceName = "eproxy.assets.v1.AssetsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AssetsServiceAssetInfoProcedure is the fully-qualified name of the AssetsService's AssetInfo RPC.
	AssetsServiceAssetInfoProcedure = "/eproxy.assets.v1.AssetsService/AssetInfo"
)

// AssetsServiceClient is a client for the eproxy.assets.v1.AssetsService service.
type AssetsServiceClient interface {
	// AssetInfo returns asset information
	AssetInfo(context.Context, *connect.Request[v1.AssetInfoRequest]) (*connect.Response[v1.AssetInfoResponse], error)
}

// NewAssetsServiceClient constructs a client for the eproxy.assets.v1.AssetsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAssetsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AssetsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	assetsServiceMethods := v1.File_eproxy_assets_v1_assets_proto.Services().ByName("AssetsService").Methods()
	return &assetsServiceClient{
		assetInfo: connect.NewClient[v1.AssetInfoRequest, v1.AssetInfoResponse](
			httpClient,
			baseURL+AssetsServiceAssetInfoProcedure,
			connect.WithSchema(assetsServiceMethods.ByName("AssetInfo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// assetsServiceClient implements AssetsServiceClient.
type assetsServiceClient struct {
	assetInfo *connect.Client[v1.AssetInfoRequest, v1.AssetInfoResponse]
}

// AssetInfo calls eproxy.assets.v1.AssetsService.AssetInfo.
func (c *assetsServiceClient) AssetInfo(ctx context.Context, req *connect.Request[v1.AssetInfoRequest]) (*connect.Response[v1.AssetInfoResponse], error) {
	return c.assetInfo.CallUnary(ctx, req)
}

// AssetsServiceHandler is an implementation of the eproxy.assets.v1.AssetsService service.
type AssetsServiceHandler interface {
	// AssetInfo returns asset information
	AssetInfo(context.Context, *connect.Request[v1.AssetInfoRequest]) (*connect.Response[v1.AssetInfoResponse], error)
}

// NewAssetsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAssetsServiceHandler(svc AssetsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	assetsServiceMethods := v1.File_eproxy_assets_v1_assets_proto.Services().ByName("AssetsService").Methods()
	assetsServiceAssetInfoHandler := connect.NewUnaryHandler(
		AssetsServiceAssetInfoProcedure,
		svc.AssetInfo,
		connect.WithSchema(assetsServiceMethods.ByName("AssetInfo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/eproxy.assets.v1.AssetsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AssetsServiceAssetInfoProcedure:
			assetsServiceAssetInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAssetsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAssetsServiceHandler struct{}

func (UnimplementedAssetsServiceHandler) AssetInfo(context.Context, *connect.Request[v1.AssetInfoRequest]) (*connect.Response[v1.AssetInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.assets.v1.AssetsService.AssetInfo is not implemented"))
}
