// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// eproxy/tron/v1/tron.proto is a deprecated file.

package tronv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dv-net/dv-proto/gen/go/eproxy/tron/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TronServiceName is the fully-qualified name of the TronService service.
	TronServiceName = "eproxy.tron.v1.TronService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TronServiceGetResourcesProcedure is the fully-qualified name of the TronService's GetResources
	// RPC.
	TronServiceGetResourcesProcedure = "/eproxy.tron.v1.TronService/GetResources"
)

// TronServiceClient is a client for the eproxy.tron.v1.TronService service.
type TronServiceClient interface {
	GetResources(context.Context, *connect.Request[v1.GetResourcesRequest]) (*connect.Response[v1.GetResourcesResponse], error)
}

// NewTronServiceClient constructs a client for the eproxy.tron.v1.TronService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTronServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TronServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tronServiceMethods := v1.File_eproxy_tron_v1_tron_proto.Services().ByName("TronService").Methods()
	return &tronServiceClient{
		getResources: connect.NewClient[v1.GetResourcesRequest, v1.GetResourcesResponse](
			httpClient,
			baseURL+TronServiceGetResourcesProcedure,
			connect.WithSchema(tronServiceMethods.ByName("GetResources")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tronServiceClient implements TronServiceClient.
type tronServiceClient struct {
	getResources *connect.Client[v1.GetResourcesRequest, v1.GetResourcesResponse]
}

// GetResources calls eproxy.tron.v1.TronService.GetResources.
func (c *tronServiceClient) GetResources(ctx context.Context, req *connect.Request[v1.GetResourcesRequest]) (*connect.Response[v1.GetResourcesResponse], error) {
	return c.getResources.CallUnary(ctx, req)
}

// TronServiceHandler is an implementation of the eproxy.tron.v1.TronService service.
type TronServiceHandler interface {
	GetResources(context.Context, *connect.Request[v1.GetResourcesRequest]) (*connect.Response[v1.GetResourcesResponse], error)
}

// NewTronServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTronServiceHandler(svc TronServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tronServiceMethods := v1.File_eproxy_tron_v1_tron_proto.Services().ByName("TronService").Methods()
	tronServiceGetResourcesHandler := connect.NewUnaryHandler(
		TronServiceGetResourcesProcedure,
		svc.GetResources,
		connect.WithSchema(tronServiceMethods.ByName("GetResources")),
		connect.WithHandlerOptions(opts...),
	)
	return "/eproxy.tron.v1.TronService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TronServiceGetResourcesProcedure:
			tronServiceGetResourcesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTronServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTronServiceHandler struct{}

func (UnimplementedTronServiceHandler) GetResources(context.Context, *connect.Request[v1.GetResourcesRequest]) (*connect.Response[v1.GetResourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.tron.v1.TronService.GetResources is not implemented"))
}
