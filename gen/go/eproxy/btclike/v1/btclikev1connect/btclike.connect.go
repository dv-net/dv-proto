// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// eproxy/btclike/v1/btclike.proto is a deprecated file.

package btclikev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dv-net/dv-proto/gen/go/eproxy/btclike/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BtcLikeServiceName is the fully-qualified name of the BtcLikeService service.
	BtcLikeServiceName = "eproxy.btclike.v1.BtcLikeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BtcLikeServiceUTXOProcedure is the fully-qualified name of the BtcLikeService's UTXO RPC.
	BtcLikeServiceUTXOProcedure = "/eproxy.btclike.v1.BtcLikeService/UTXO"
	// BtcLikeServiceMedianFeePerByteBlockProcedure is the fully-qualified name of the BtcLikeService's
	// MedianFeePerByteBlock RPC.
	BtcLikeServiceMedianFeePerByteBlockProcedure = "/eproxy.btclike.v1.BtcLikeService/MedianFeePerByteBlock"
	// BtcLikeServiceRemovedBlockListProcedure is the fully-qualified name of the BtcLikeService's
	// RemovedBlockList RPC.
	BtcLikeServiceRemovedBlockListProcedure = "/eproxy.btclike.v1.BtcLikeService/RemovedBlockList"
	// BtcLikeServiceRemovedBlockProcedure is the fully-qualified name of the BtcLikeService's
	// RemovedBlock RPC.
	BtcLikeServiceRemovedBlockProcedure = "/eproxy.btclike.v1.BtcLikeService/RemovedBlock"
)

// BtcLikeServiceClient is a client for the eproxy.btclike.v1.BtcLikeService service.
type BtcLikeServiceClient interface {
	// An unspent transaction output (UTXO) refers to a transaction output that can be used as input in a new transaction
	UTXO(context.Context, *connect.Request[v1.UTXORequest]) (*connect.Response[v1.UTXOResponse], error)
	// MedianFeePerByteBlock returns median block fee
	MedianFeePerByteBlock(context.Context, *connect.Request[v1.MedianFeePerByteBlockRequest]) (*connect.Response[v1.MedianFeePerByteBlockResponse], error)
	// RemovedBlockList returns removed block info sorted by height
	RemovedBlockList(context.Context, *connect.Request[v1.RemovedBlockListRequest]) (*connect.Response[v1.RemovedBlockListResponse], error)
	// RemovedBlock returns last block number of database
	RemovedBlock(context.Context, *connect.Request[v1.RemovedBlockRequest]) (*connect.Response[v1.RemovedBlockResponse], error)
}

// NewBtcLikeServiceClient constructs a client for the eproxy.btclike.v1.BtcLikeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBtcLikeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BtcLikeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	btcLikeServiceMethods := v1.File_eproxy_btclike_v1_btclike_proto.Services().ByName("BtcLikeService").Methods()
	return &btcLikeServiceClient{
		uTXO: connect.NewClient[v1.UTXORequest, v1.UTXOResponse](
			httpClient,
			baseURL+BtcLikeServiceUTXOProcedure,
			connect.WithSchema(btcLikeServiceMethods.ByName("UTXO")),
			connect.WithClientOptions(opts...),
		),
		medianFeePerByteBlock: connect.NewClient[v1.MedianFeePerByteBlockRequest, v1.MedianFeePerByteBlockResponse](
			httpClient,
			baseURL+BtcLikeServiceMedianFeePerByteBlockProcedure,
			connect.WithSchema(btcLikeServiceMethods.ByName("MedianFeePerByteBlock")),
			connect.WithClientOptions(opts...),
		),
		removedBlockList: connect.NewClient[v1.RemovedBlockListRequest, v1.RemovedBlockListResponse](
			httpClient,
			baseURL+BtcLikeServiceRemovedBlockListProcedure,
			connect.WithSchema(btcLikeServiceMethods.ByName("RemovedBlockList")),
			connect.WithClientOptions(opts...),
		),
		removedBlock: connect.NewClient[v1.RemovedBlockRequest, v1.RemovedBlockResponse](
			httpClient,
			baseURL+BtcLikeServiceRemovedBlockProcedure,
			connect.WithSchema(btcLikeServiceMethods.ByName("RemovedBlock")),
			connect.WithClientOptions(opts...),
		),
	}
}

// btcLikeServiceClient implements BtcLikeServiceClient.
type btcLikeServiceClient struct {
	uTXO                  *connect.Client[v1.UTXORequest, v1.UTXOResponse]
	medianFeePerByteBlock *connect.Client[v1.MedianFeePerByteBlockRequest, v1.MedianFeePerByteBlockResponse]
	removedBlockList      *connect.Client[v1.RemovedBlockListRequest, v1.RemovedBlockListResponse]
	removedBlock          *connect.Client[v1.RemovedBlockRequest, v1.RemovedBlockResponse]
}

// UTXO calls eproxy.btclike.v1.BtcLikeService.UTXO.
func (c *btcLikeServiceClient) UTXO(ctx context.Context, req *connect.Request[v1.UTXORequest]) (*connect.Response[v1.UTXOResponse], error) {
	return c.uTXO.CallUnary(ctx, req)
}

// MedianFeePerByteBlock calls eproxy.btclike.v1.BtcLikeService.MedianFeePerByteBlock.
func (c *btcLikeServiceClient) MedianFeePerByteBlock(ctx context.Context, req *connect.Request[v1.MedianFeePerByteBlockRequest]) (*connect.Response[v1.MedianFeePerByteBlockResponse], error) {
	return c.medianFeePerByteBlock.CallUnary(ctx, req)
}

// RemovedBlockList calls eproxy.btclike.v1.BtcLikeService.RemovedBlockList.
func (c *btcLikeServiceClient) RemovedBlockList(ctx context.Context, req *connect.Request[v1.RemovedBlockListRequest]) (*connect.Response[v1.RemovedBlockListResponse], error) {
	return c.removedBlockList.CallUnary(ctx, req)
}

// RemovedBlock calls eproxy.btclike.v1.BtcLikeService.RemovedBlock.
func (c *btcLikeServiceClient) RemovedBlock(ctx context.Context, req *connect.Request[v1.RemovedBlockRequest]) (*connect.Response[v1.RemovedBlockResponse], error) {
	return c.removedBlock.CallUnary(ctx, req)
}

// BtcLikeServiceHandler is an implementation of the eproxy.btclike.v1.BtcLikeService service.
type BtcLikeServiceHandler interface {
	// An unspent transaction output (UTXO) refers to a transaction output that can be used as input in a new transaction
	UTXO(context.Context, *connect.Request[v1.UTXORequest]) (*connect.Response[v1.UTXOResponse], error)
	// MedianFeePerByteBlock returns median block fee
	MedianFeePerByteBlock(context.Context, *connect.Request[v1.MedianFeePerByteBlockRequest]) (*connect.Response[v1.MedianFeePerByteBlockResponse], error)
	// RemovedBlockList returns removed block info sorted by height
	RemovedBlockList(context.Context, *connect.Request[v1.RemovedBlockListRequest]) (*connect.Response[v1.RemovedBlockListResponse], error)
	// RemovedBlock returns last block number of database
	RemovedBlock(context.Context, *connect.Request[v1.RemovedBlockRequest]) (*connect.Response[v1.RemovedBlockResponse], error)
}

// NewBtcLikeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBtcLikeServiceHandler(svc BtcLikeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	btcLikeServiceMethods := v1.File_eproxy_btclike_v1_btclike_proto.Services().ByName("BtcLikeService").Methods()
	btcLikeServiceUTXOHandler := connect.NewUnaryHandler(
		BtcLikeServiceUTXOProcedure,
		svc.UTXO,
		connect.WithSchema(btcLikeServiceMethods.ByName("UTXO")),
		connect.WithHandlerOptions(opts...),
	)
	btcLikeServiceMedianFeePerByteBlockHandler := connect.NewUnaryHandler(
		BtcLikeServiceMedianFeePerByteBlockProcedure,
		svc.MedianFeePerByteBlock,
		connect.WithSchema(btcLikeServiceMethods.ByName("MedianFeePerByteBlock")),
		connect.WithHandlerOptions(opts...),
	)
	btcLikeServiceRemovedBlockListHandler := connect.NewUnaryHandler(
		BtcLikeServiceRemovedBlockListProcedure,
		svc.RemovedBlockList,
		connect.WithSchema(btcLikeServiceMethods.ByName("RemovedBlockList")),
		connect.WithHandlerOptions(opts...),
	)
	btcLikeServiceRemovedBlockHandler := connect.NewUnaryHandler(
		BtcLikeServiceRemovedBlockProcedure,
		svc.RemovedBlock,
		connect.WithSchema(btcLikeServiceMethods.ByName("RemovedBlock")),
		connect.WithHandlerOptions(opts...),
	)
	return "/eproxy.btclike.v1.BtcLikeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BtcLikeServiceUTXOProcedure:
			btcLikeServiceUTXOHandler.ServeHTTP(w, r)
		case BtcLikeServiceMedianFeePerByteBlockProcedure:
			btcLikeServiceMedianFeePerByteBlockHandler.ServeHTTP(w, r)
		case BtcLikeServiceRemovedBlockListProcedure:
			btcLikeServiceRemovedBlockListHandler.ServeHTTP(w, r)
		case BtcLikeServiceRemovedBlockProcedure:
			btcLikeServiceRemovedBlockHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBtcLikeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBtcLikeServiceHandler struct{}

func (UnimplementedBtcLikeServiceHandler) UTXO(context.Context, *connect.Request[v1.UTXORequest]) (*connect.Response[v1.UTXOResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.btclike.v1.BtcLikeService.UTXO is not implemented"))
}

func (UnimplementedBtcLikeServiceHandler) MedianFeePerByteBlock(context.Context, *connect.Request[v1.MedianFeePerByteBlockRequest]) (*connect.Response[v1.MedianFeePerByteBlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.btclike.v1.BtcLikeService.MedianFeePerByteBlock is not implemented"))
}

func (UnimplementedBtcLikeServiceHandler) RemovedBlockList(context.Context, *connect.Request[v1.RemovedBlockListRequest]) (*connect.Response[v1.RemovedBlockListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.btclike.v1.BtcLikeService.RemovedBlockList is not implemented"))
}

func (UnimplementedBtcLikeServiceHandler) RemovedBlock(context.Context, *connect.Request[v1.RemovedBlockRequest]) (*connect.Response[v1.RemovedBlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.btclike.v1.BtcLikeService.RemovedBlock is not implemented"))
}
