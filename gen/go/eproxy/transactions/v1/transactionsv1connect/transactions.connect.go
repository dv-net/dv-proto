// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// eproxy/transactions/v1/transactions.proto is a deprecated file.

package transactionsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dv-net/dv-proto/gen/go/eproxy/transactions/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TransactionsServiceName is the fully-qualified name of the TransactionsService service.
	TransactionsServiceName = "eproxy.transactions.v1.TransactionsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TransactionsServiceFindProcedure is the fully-qualified name of the TransactionsService's Find
	// RPC.
	TransactionsServiceFindProcedure = "/eproxy.transactions.v1.TransactionsService/Find"
	// TransactionsServiceGetInfoProcedure is the fully-qualified name of the TransactionsService's
	// GetInfo RPC.
	TransactionsServiceGetInfoProcedure = "/eproxy.transactions.v1.TransactionsService/GetInfo"
)

// TransactionsServiceClient is a client for the eproxy.transactions.v1.TransactionsService service.
type TransactionsServiceClient interface {
	// Find returns information about transactions list by hash, address, block
	// height and contract address
	Find(context.Context, *connect.Request[v1.FindRequest]) (*connect.Response[v1.FindResponse], error)
	// GetInfo returns data associated with hash on specific blockchain, mixing
	// database data with node data.
	GetInfo(context.Context, *connect.Request[v1.GetInfoRequest]) (*connect.Response[v1.GetInfoResponse], error)
}

// NewTransactionsServiceClient constructs a client for the
// eproxy.transactions.v1.TransactionsService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransactionsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TransactionsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	transactionsServiceMethods := v1.File_eproxy_transactions_v1_transactions_proto.Services().ByName("TransactionsService").Methods()
	return &transactionsServiceClient{
		find: connect.NewClient[v1.FindRequest, v1.FindResponse](
			httpClient,
			baseURL+TransactionsServiceFindProcedure,
			connect.WithSchema(transactionsServiceMethods.ByName("Find")),
			connect.WithClientOptions(opts...),
		),
		getInfo: connect.NewClient[v1.GetInfoRequest, v1.GetInfoResponse](
			httpClient,
			baseURL+TransactionsServiceGetInfoProcedure,
			connect.WithSchema(transactionsServiceMethods.ByName("GetInfo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// transactionsServiceClient implements TransactionsServiceClient.
type transactionsServiceClient struct {
	find    *connect.Client[v1.FindRequest, v1.FindResponse]
	getInfo *connect.Client[v1.GetInfoRequest, v1.GetInfoResponse]
}

// Find calls eproxy.transactions.v1.TransactionsService.Find.
func (c *transactionsServiceClient) Find(ctx context.Context, req *connect.Request[v1.FindRequest]) (*connect.Response[v1.FindResponse], error) {
	return c.find.CallUnary(ctx, req)
}

// GetInfo calls eproxy.transactions.v1.TransactionsService.GetInfo.
func (c *transactionsServiceClient) GetInfo(ctx context.Context, req *connect.Request[v1.GetInfoRequest]) (*connect.Response[v1.GetInfoResponse], error) {
	return c.getInfo.CallUnary(ctx, req)
}

// TransactionsServiceHandler is an implementation of the eproxy.transactions.v1.TransactionsService
// service.
type TransactionsServiceHandler interface {
	// Find returns information about transactions list by hash, address, block
	// height and contract address
	Find(context.Context, *connect.Request[v1.FindRequest]) (*connect.Response[v1.FindResponse], error)
	// GetInfo returns data associated with hash on specific blockchain, mixing
	// database data with node data.
	GetInfo(context.Context, *connect.Request[v1.GetInfoRequest]) (*connect.Response[v1.GetInfoResponse], error)
}

// NewTransactionsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransactionsServiceHandler(svc TransactionsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	transactionsServiceMethods := v1.File_eproxy_transactions_v1_transactions_proto.Services().ByName("TransactionsService").Methods()
	transactionsServiceFindHandler := connect.NewUnaryHandler(
		TransactionsServiceFindProcedure,
		svc.Find,
		connect.WithSchema(transactionsServiceMethods.ByName("Find")),
		connect.WithHandlerOptions(opts...),
	)
	transactionsServiceGetInfoHandler := connect.NewUnaryHandler(
		TransactionsServiceGetInfoProcedure,
		svc.GetInfo,
		connect.WithSchema(transactionsServiceMethods.ByName("GetInfo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/eproxy.transactions.v1.TransactionsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TransactionsServiceFindProcedure:
			transactionsServiceFindHandler.ServeHTTP(w, r)
		case TransactionsServiceGetInfoProcedure:
			transactionsServiceGetInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTransactionsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTransactionsServiceHandler struct{}

func (UnimplementedTransactionsServiceHandler) Find(context.Context, *connect.Request[v1.FindRequest]) (*connect.Response[v1.FindResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.transactions.v1.TransactionsService.Find is not implemented"))
}

func (UnimplementedTransactionsServiceHandler) GetInfo(context.Context, *connect.Request[v1.GetInfoRequest]) (*connect.Response[v1.GetInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.transactions.v1.TransactionsService.GetInfo is not implemented"))
}
