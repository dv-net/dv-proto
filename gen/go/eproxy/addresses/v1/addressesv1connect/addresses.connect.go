// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// eproxy/addresses/v1/addresses.proto is a deprecated file.

package addressesv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dv-net/dv-proto/gen/go/eproxy/addresses/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AddressServiceName is the fully-qualified name of the AddressService service.
	AddressServiceName = "eproxy.addresses.v1.AddressService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AddressServiceGetProcedure is the fully-qualified name of the AddressService's Get RPC.
	AddressServiceGetProcedure = "/eproxy.addresses.v1.AddressService/Get"
	// AddressServiceGetBalanceProcedure is the fully-qualified name of the AddressService's GetBalance
	// RPC.
	AddressServiceGetBalanceProcedure = "/eproxy.addresses.v1.AddressService/GetBalance"
)

// AddressServiceClient is a client for the eproxy.addresses.v1.AddressService service.
type AddressServiceClient interface {
	// Get returns address information by address and blockchain
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	// GetBalance returns balance by address, asset_identifier and blockchain
	GetBalance(context.Context, *connect.Request[v1.GetBalanceRequest]) (*connect.Response[v1.GetBalanceResponse], error)
}

// NewAddressServiceClient constructs a client for the eproxy.addresses.v1.AddressService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAddressServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AddressServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	addressServiceMethods := v1.File_eproxy_addresses_v1_addresses_proto.Services().ByName("AddressService").Methods()
	return &addressServiceClient{
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+AddressServiceGetProcedure,
			connect.WithSchema(addressServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		getBalance: connect.NewClient[v1.GetBalanceRequest, v1.GetBalanceResponse](
			httpClient,
			baseURL+AddressServiceGetBalanceProcedure,
			connect.WithSchema(addressServiceMethods.ByName("GetBalance")),
			connect.WithClientOptions(opts...),
		),
	}
}

// addressServiceClient implements AddressServiceClient.
type addressServiceClient struct {
	get        *connect.Client[v1.GetRequest, v1.GetResponse]
	getBalance *connect.Client[v1.GetBalanceRequest, v1.GetBalanceResponse]
}

// Get calls eproxy.addresses.v1.AddressService.Get.
func (c *addressServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// GetBalance calls eproxy.addresses.v1.AddressService.GetBalance.
func (c *addressServiceClient) GetBalance(ctx context.Context, req *connect.Request[v1.GetBalanceRequest]) (*connect.Response[v1.GetBalanceResponse], error) {
	return c.getBalance.CallUnary(ctx, req)
}

// AddressServiceHandler is an implementation of the eproxy.addresses.v1.AddressService service.
type AddressServiceHandler interface {
	// Get returns address information by address and blockchain
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	// GetBalance returns balance by address, asset_identifier and blockchain
	GetBalance(context.Context, *connect.Request[v1.GetBalanceRequest]) (*connect.Response[v1.GetBalanceResponse], error)
}

// NewAddressServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAddressServiceHandler(svc AddressServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	addressServiceMethods := v1.File_eproxy_addresses_v1_addresses_proto.Services().ByName("AddressService").Methods()
	addressServiceGetHandler := connect.NewUnaryHandler(
		AddressServiceGetProcedure,
		svc.Get,
		connect.WithSchema(addressServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	addressServiceGetBalanceHandler := connect.NewUnaryHandler(
		AddressServiceGetBalanceProcedure,
		svc.GetBalance,
		connect.WithSchema(addressServiceMethods.ByName("GetBalance")),
		connect.WithHandlerOptions(opts...),
	)
	return "/eproxy.addresses.v1.AddressService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AddressServiceGetProcedure:
			addressServiceGetHandler.ServeHTTP(w, r)
		case AddressServiceGetBalanceProcedure:
			addressServiceGetBalanceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAddressServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAddressServiceHandler struct{}

func (UnimplementedAddressServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.addresses.v1.AddressService.Get is not implemented"))
}

func (UnimplementedAddressServiceHandler) GetBalance(context.Context, *connect.Request[v1.GetBalanceRequest]) (*connect.Response[v1.GetBalanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.addresses.v1.AddressService.GetBalance is not implemented"))
}
