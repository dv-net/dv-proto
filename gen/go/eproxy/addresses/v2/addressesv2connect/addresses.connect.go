// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: eproxy/addresses/v2/addresses.proto

package addressesv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/dv-net/dv-proto/gen/go/eproxy/addresses/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AddressesServiceName is the fully-qualified name of the AddressesService service.
	AddressesServiceName = "eproxy.addresses.v2.AddressesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AddressesServiceInfoProcedure is the fully-qualified name of the AddressesService's Info RPC.
	AddressesServiceInfoProcedure = "/eproxy.addresses.v2.AddressesService/Info"
	// AddressesServiceBalanceProcedure is the fully-qualified name of the AddressesService's Balance
	// RPC.
	AddressesServiceBalanceProcedure = "/eproxy.addresses.v2.AddressesService/Balance"
)

// AddressesServiceClient is a client for the eproxy.addresses.v2.AddressesService service.
type AddressesServiceClient interface {
	// Info returns address information by address and blockchain with full
	// balances list
	Info(context.Context, *connect.Request[v2.InfoRequest]) (*connect.Response[v2.InfoResponse], error)
	// Balance returns balance by address, asset identifier and blockchain
	Balance(context.Context, *connect.Request[v2.BalanceRequest]) (*connect.Response[v2.BalanceResponse], error)
}

// NewAddressesServiceClient constructs a client for the eproxy.addresses.v2.AddressesService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAddressesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AddressesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	addressesServiceMethods := v2.File_eproxy_addresses_v2_addresses_proto.Services().ByName("AddressesService").Methods()
	return &addressesServiceClient{
		info: connect.NewClient[v2.InfoRequest, v2.InfoResponse](
			httpClient,
			baseURL+AddressesServiceInfoProcedure,
			connect.WithSchema(addressesServiceMethods.ByName("Info")),
			connect.WithClientOptions(opts...),
		),
		balance: connect.NewClient[v2.BalanceRequest, v2.BalanceResponse](
			httpClient,
			baseURL+AddressesServiceBalanceProcedure,
			connect.WithSchema(addressesServiceMethods.ByName("Balance")),
			connect.WithClientOptions(opts...),
		),
	}
}

// addressesServiceClient implements AddressesServiceClient.
type addressesServiceClient struct {
	info    *connect.Client[v2.InfoRequest, v2.InfoResponse]
	balance *connect.Client[v2.BalanceRequest, v2.BalanceResponse]
}

// Info calls eproxy.addresses.v2.AddressesService.Info.
func (c *addressesServiceClient) Info(ctx context.Context, req *connect.Request[v2.InfoRequest]) (*connect.Response[v2.InfoResponse], error) {
	return c.info.CallUnary(ctx, req)
}

// Balance calls eproxy.addresses.v2.AddressesService.Balance.
func (c *addressesServiceClient) Balance(ctx context.Context, req *connect.Request[v2.BalanceRequest]) (*connect.Response[v2.BalanceResponse], error) {
	return c.balance.CallUnary(ctx, req)
}

// AddressesServiceHandler is an implementation of the eproxy.addresses.v2.AddressesService service.
type AddressesServiceHandler interface {
	// Info returns address information by address and blockchain with full
	// balances list
	Info(context.Context, *connect.Request[v2.InfoRequest]) (*connect.Response[v2.InfoResponse], error)
	// Balance returns balance by address, asset identifier and blockchain
	Balance(context.Context, *connect.Request[v2.BalanceRequest]) (*connect.Response[v2.BalanceResponse], error)
}

// NewAddressesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAddressesServiceHandler(svc AddressesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	addressesServiceMethods := v2.File_eproxy_addresses_v2_addresses_proto.Services().ByName("AddressesService").Methods()
	addressesServiceInfoHandler := connect.NewUnaryHandler(
		AddressesServiceInfoProcedure,
		svc.Info,
		connect.WithSchema(addressesServiceMethods.ByName("Info")),
		connect.WithHandlerOptions(opts...),
	)
	addressesServiceBalanceHandler := connect.NewUnaryHandler(
		AddressesServiceBalanceProcedure,
		svc.Balance,
		connect.WithSchema(addressesServiceMethods.ByName("Balance")),
		connect.WithHandlerOptions(opts...),
	)
	return "/eproxy.addresses.v2.AddressesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AddressesServiceInfoProcedure:
			addressesServiceInfoHandler.ServeHTTP(w, r)
		case AddressesServiceBalanceProcedure:
			addressesServiceBalanceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAddressesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAddressesServiceHandler struct{}

func (UnimplementedAddressesServiceHandler) Info(context.Context, *connect.Request[v2.InfoRequest]) (*connect.Response[v2.InfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.addresses.v2.AddressesService.Info is not implemented"))
}

func (UnimplementedAddressesServiceHandler) Balance(context.Context, *connect.Request[v2.BalanceRequest]) (*connect.Response[v2.BalanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.addresses.v2.AddressesService.Balance is not implemented"))
}
