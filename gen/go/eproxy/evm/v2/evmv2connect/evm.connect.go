// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: eproxy/evm/v2/evm.proto

package evmv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/dv-net/dv-proto/gen/go/eproxy/evm/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EVMServiceName is the fully-qualified name of the EVMService service.
	EVMServiceName = "eproxy.evm.v2.EVMService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EVMServiceSuggestGasPriceProcedure is the fully-qualified name of the EVMService's
	// SuggestGasPrice RPC.
	EVMServiceSuggestGasPriceProcedure = "/eproxy.evm.v2.EVMService/SuggestGasPrice"
)

// EVMServiceClient is a client for the eproxy.evm.v2.EVMService service.
type EVMServiceClient interface {
	// SuggestGasPrice returns the latest gas fee in Wei.
	SuggestGasPrice(context.Context, *connect.Request[v2.SuggestGasPriceRequest]) (*connect.Response[v2.SuggestGasPriceResponse], error)
}

// NewEVMServiceClient constructs a client for the eproxy.evm.v2.EVMService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEVMServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EVMServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	eVMServiceMethods := v2.File_eproxy_evm_v2_evm_proto.Services().ByName("EVMService").Methods()
	return &eVMServiceClient{
		suggestGasPrice: connect.NewClient[v2.SuggestGasPriceRequest, v2.SuggestGasPriceResponse](
			httpClient,
			baseURL+EVMServiceSuggestGasPriceProcedure,
			connect.WithSchema(eVMServiceMethods.ByName("SuggestGasPrice")),
			connect.WithClientOptions(opts...),
		),
	}
}

// eVMServiceClient implements EVMServiceClient.
type eVMServiceClient struct {
	suggestGasPrice *connect.Client[v2.SuggestGasPriceRequest, v2.SuggestGasPriceResponse]
}

// SuggestGasPrice calls eproxy.evm.v2.EVMService.SuggestGasPrice.
func (c *eVMServiceClient) SuggestGasPrice(ctx context.Context, req *connect.Request[v2.SuggestGasPriceRequest]) (*connect.Response[v2.SuggestGasPriceResponse], error) {
	return c.suggestGasPrice.CallUnary(ctx, req)
}

// EVMServiceHandler is an implementation of the eproxy.evm.v2.EVMService service.
type EVMServiceHandler interface {
	// SuggestGasPrice returns the latest gas fee in Wei.
	SuggestGasPrice(context.Context, *connect.Request[v2.SuggestGasPriceRequest]) (*connect.Response[v2.SuggestGasPriceResponse], error)
}

// NewEVMServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEVMServiceHandler(svc EVMServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eVMServiceMethods := v2.File_eproxy_evm_v2_evm_proto.Services().ByName("EVMService").Methods()
	eVMServiceSuggestGasPriceHandler := connect.NewUnaryHandler(
		EVMServiceSuggestGasPriceProcedure,
		svc.SuggestGasPrice,
		connect.WithSchema(eVMServiceMethods.ByName("SuggestGasPrice")),
		connect.WithHandlerOptions(opts...),
	)
	return "/eproxy.evm.v2.EVMService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EVMServiceSuggestGasPriceProcedure:
			eVMServiceSuggestGasPriceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEVMServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEVMServiceHandler struct{}

func (UnimplementedEVMServiceHandler) SuggestGasPrice(context.Context, *connect.Request[v2.SuggestGasPriceRequest]) (*connect.Response[v2.SuggestGasPriceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.evm.v2.EVMService.SuggestGasPrice is not implemented"))
}
