// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: eproxy/blocks/v2/blocks.proto

package blocksv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/dv-net/dv-proto/gen/go/eproxy/blocks/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BlocksServiceName is the fully-qualified name of the BlocksService service.
	BlocksServiceName = "eproxy.blocks.v2.BlocksService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BlocksServiceGetProcedure is the fully-qualified name of the BlocksService's Get RPC.
	BlocksServiceGetProcedure = "/eproxy.blocks.v2.BlocksService/Get"
	// BlocksServiceFindProcedure is the fully-qualified name of the BlocksService's Find RPC.
	BlocksServiceFindProcedure = "/eproxy.blocks.v2.BlocksService/Find"
	// BlocksServiceNodeLastBlockHeightProcedure is the fully-qualified name of the BlocksService's
	// NodeLastBlockHeight RPC.
	BlocksServiceNodeLastBlockHeightProcedure = "/eproxy.blocks.v2.BlocksService/NodeLastBlockHeight"
	// BlocksServiceLastBlockHeightProcedure is the fully-qualified name of the BlocksService's
	// LastBlockHeight RPC.
	BlocksServiceLastBlockHeightProcedure = "/eproxy.blocks.v2.BlocksService/LastBlockHeight"
	// BlocksServiceMinBlockHeightProcedure is the fully-qualified name of the BlocksService's
	// MinBlockHeight RPC.
	BlocksServiceMinBlockHeightProcedure = "/eproxy.blocks.v2.BlocksService/MinBlockHeight"
	// BlocksServiceSubscribeProcedure is the fully-qualified name of the BlocksService's Subscribe RPC.
	BlocksServiceSubscribeProcedure = "/eproxy.blocks.v2.BlocksService/Subscribe"
	// BlocksServiceTotalInfoProcedure is the fully-qualified name of the BlocksService's TotalInfo RPC.
	BlocksServiceTotalInfoProcedure = "/eproxy.blocks.v2.BlocksService/TotalInfo"
)

// BlocksServiceClient is a client for the eproxy.blocks.v2.BlocksService service.
type BlocksServiceClient interface {
	// Get returns block info by height and blockchain
	Get(context.Context, *connect.Request[v2.GetRequest]) (*connect.Response[v2.GetResponse], error)
	// Find returns block info by height and blockchain
	Find(context.Context, *connect.Request[v2.FindRequest]) (*connect.Response[v2.FindResponse], error)
	// NodeLastBlockHeight returns last block number from database
	NodeLastBlockHeight(context.Context, *connect.Request[v2.NodeLastBlockHeightRequest]) (*connect.Response[v2.NodeLastBlockHeightResponse], error)
	// LastBlockHeight returns last block number from database
	LastBlockHeight(context.Context, *connect.Request[v2.LastBlockHeightRequest]) (*connect.Response[v2.LastBlockHeightResponse], error)
	// MinBlockHeight returns min block number from database
	MinBlockHeight(context.Context, *connect.Request[v2.MinBlockHeightRequest]) (*connect.Response[v2.MinBlockHeightResponse], error)
	// Subscribe returns stream of the newest blocks in blockchain
	Subscribe(context.Context, *connect.Request[v2.SubscribeRequest]) (*connect.ServerStreamForClient[v2.SubscribeResponse], error)
	// TotalInfo returns total info about blocks in blockchains
	TotalInfo(context.Context, *connect.Request[v2.TotalInfoRequest]) (*connect.Response[v2.TotalInfoResponse], error)
}

// NewBlocksServiceClient constructs a client for the eproxy.blocks.v2.BlocksService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBlocksServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BlocksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	blocksServiceMethods := v2.File_eproxy_blocks_v2_blocks_proto.Services().ByName("BlocksService").Methods()
	return &blocksServiceClient{
		get: connect.NewClient[v2.GetRequest, v2.GetResponse](
			httpClient,
			baseURL+BlocksServiceGetProcedure,
			connect.WithSchema(blocksServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		find: connect.NewClient[v2.FindRequest, v2.FindResponse](
			httpClient,
			baseURL+BlocksServiceFindProcedure,
			connect.WithSchema(blocksServiceMethods.ByName("Find")),
			connect.WithClientOptions(opts...),
		),
		nodeLastBlockHeight: connect.NewClient[v2.NodeLastBlockHeightRequest, v2.NodeLastBlockHeightResponse](
			httpClient,
			baseURL+BlocksServiceNodeLastBlockHeightProcedure,
			connect.WithSchema(blocksServiceMethods.ByName("NodeLastBlockHeight")),
			connect.WithClientOptions(opts...),
		),
		lastBlockHeight: connect.NewClient[v2.LastBlockHeightRequest, v2.LastBlockHeightResponse](
			httpClient,
			baseURL+BlocksServiceLastBlockHeightProcedure,
			connect.WithSchema(blocksServiceMethods.ByName("LastBlockHeight")),
			connect.WithClientOptions(opts...),
		),
		minBlockHeight: connect.NewClient[v2.MinBlockHeightRequest, v2.MinBlockHeightResponse](
			httpClient,
			baseURL+BlocksServiceMinBlockHeightProcedure,
			connect.WithSchema(blocksServiceMethods.ByName("MinBlockHeight")),
			connect.WithClientOptions(opts...),
		),
		subscribe: connect.NewClient[v2.SubscribeRequest, v2.SubscribeResponse](
			httpClient,
			baseURL+BlocksServiceSubscribeProcedure,
			connect.WithSchema(blocksServiceMethods.ByName("Subscribe")),
			connect.WithClientOptions(opts...),
		),
		totalInfo: connect.NewClient[v2.TotalInfoRequest, v2.TotalInfoResponse](
			httpClient,
			baseURL+BlocksServiceTotalInfoProcedure,
			connect.WithSchema(blocksServiceMethods.ByName("TotalInfo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// blocksServiceClient implements BlocksServiceClient.
type blocksServiceClient struct {
	get                 *connect.Client[v2.GetRequest, v2.GetResponse]
	find                *connect.Client[v2.FindRequest, v2.FindResponse]
	nodeLastBlockHeight *connect.Client[v2.NodeLastBlockHeightRequest, v2.NodeLastBlockHeightResponse]
	lastBlockHeight     *connect.Client[v2.LastBlockHeightRequest, v2.LastBlockHeightResponse]
	minBlockHeight      *connect.Client[v2.MinBlockHeightRequest, v2.MinBlockHeightResponse]
	subscribe           *connect.Client[v2.SubscribeRequest, v2.SubscribeResponse]
	totalInfo           *connect.Client[v2.TotalInfoRequest, v2.TotalInfoResponse]
}

// Get calls eproxy.blocks.v2.BlocksService.Get.
func (c *blocksServiceClient) Get(ctx context.Context, req *connect.Request[v2.GetRequest]) (*connect.Response[v2.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Find calls eproxy.blocks.v2.BlocksService.Find.
func (c *blocksServiceClient) Find(ctx context.Context, req *connect.Request[v2.FindRequest]) (*connect.Response[v2.FindResponse], error) {
	return c.find.CallUnary(ctx, req)
}

// NodeLastBlockHeight calls eproxy.blocks.v2.BlocksService.NodeLastBlockHeight.
func (c *blocksServiceClient) NodeLastBlockHeight(ctx context.Context, req *connect.Request[v2.NodeLastBlockHeightRequest]) (*connect.Response[v2.NodeLastBlockHeightResponse], error) {
	return c.nodeLastBlockHeight.CallUnary(ctx, req)
}

// LastBlockHeight calls eproxy.blocks.v2.BlocksService.LastBlockHeight.
func (c *blocksServiceClient) LastBlockHeight(ctx context.Context, req *connect.Request[v2.LastBlockHeightRequest]) (*connect.Response[v2.LastBlockHeightResponse], error) {
	return c.lastBlockHeight.CallUnary(ctx, req)
}

// MinBlockHeight calls eproxy.blocks.v2.BlocksService.MinBlockHeight.
func (c *blocksServiceClient) MinBlockHeight(ctx context.Context, req *connect.Request[v2.MinBlockHeightRequest]) (*connect.Response[v2.MinBlockHeightResponse], error) {
	return c.minBlockHeight.CallUnary(ctx, req)
}

// Subscribe calls eproxy.blocks.v2.BlocksService.Subscribe.
func (c *blocksServiceClient) Subscribe(ctx context.Context, req *connect.Request[v2.SubscribeRequest]) (*connect.ServerStreamForClient[v2.SubscribeResponse], error) {
	return c.subscribe.CallServerStream(ctx, req)
}

// TotalInfo calls eproxy.blocks.v2.BlocksService.TotalInfo.
func (c *blocksServiceClient) TotalInfo(ctx context.Context, req *connect.Request[v2.TotalInfoRequest]) (*connect.Response[v2.TotalInfoResponse], error) {
	return c.totalInfo.CallUnary(ctx, req)
}

// BlocksServiceHandler is an implementation of the eproxy.blocks.v2.BlocksService service.
type BlocksServiceHandler interface {
	// Get returns block info by height and blockchain
	Get(context.Context, *connect.Request[v2.GetRequest]) (*connect.Response[v2.GetResponse], error)
	// Find returns block info by height and blockchain
	Find(context.Context, *connect.Request[v2.FindRequest]) (*connect.Response[v2.FindResponse], error)
	// NodeLastBlockHeight returns last block number from database
	NodeLastBlockHeight(context.Context, *connect.Request[v2.NodeLastBlockHeightRequest]) (*connect.Response[v2.NodeLastBlockHeightResponse], error)
	// LastBlockHeight returns last block number from database
	LastBlockHeight(context.Context, *connect.Request[v2.LastBlockHeightRequest]) (*connect.Response[v2.LastBlockHeightResponse], error)
	// MinBlockHeight returns min block number from database
	MinBlockHeight(context.Context, *connect.Request[v2.MinBlockHeightRequest]) (*connect.Response[v2.MinBlockHeightResponse], error)
	// Subscribe returns stream of the newest blocks in blockchain
	Subscribe(context.Context, *connect.Request[v2.SubscribeRequest], *connect.ServerStream[v2.SubscribeResponse]) error
	// TotalInfo returns total info about blocks in blockchains
	TotalInfo(context.Context, *connect.Request[v2.TotalInfoRequest]) (*connect.Response[v2.TotalInfoResponse], error)
}

// NewBlocksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBlocksServiceHandler(svc BlocksServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	blocksServiceMethods := v2.File_eproxy_blocks_v2_blocks_proto.Services().ByName("BlocksService").Methods()
	blocksServiceGetHandler := connect.NewUnaryHandler(
		BlocksServiceGetProcedure,
		svc.Get,
		connect.WithSchema(blocksServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	blocksServiceFindHandler := connect.NewUnaryHandler(
		BlocksServiceFindProcedure,
		svc.Find,
		connect.WithSchema(blocksServiceMethods.ByName("Find")),
		connect.WithHandlerOptions(opts...),
	)
	blocksServiceNodeLastBlockHeightHandler := connect.NewUnaryHandler(
		BlocksServiceNodeLastBlockHeightProcedure,
		svc.NodeLastBlockHeight,
		connect.WithSchema(blocksServiceMethods.ByName("NodeLastBlockHeight")),
		connect.WithHandlerOptions(opts...),
	)
	blocksServiceLastBlockHeightHandler := connect.NewUnaryHandler(
		BlocksServiceLastBlockHeightProcedure,
		svc.LastBlockHeight,
		connect.WithSchema(blocksServiceMethods.ByName("LastBlockHeight")),
		connect.WithHandlerOptions(opts...),
	)
	blocksServiceMinBlockHeightHandler := connect.NewUnaryHandler(
		BlocksServiceMinBlockHeightProcedure,
		svc.MinBlockHeight,
		connect.WithSchema(blocksServiceMethods.ByName("MinBlockHeight")),
		connect.WithHandlerOptions(opts...),
	)
	blocksServiceSubscribeHandler := connect.NewServerStreamHandler(
		BlocksServiceSubscribeProcedure,
		svc.Subscribe,
		connect.WithSchema(blocksServiceMethods.ByName("Subscribe")),
		connect.WithHandlerOptions(opts...),
	)
	blocksServiceTotalInfoHandler := connect.NewUnaryHandler(
		BlocksServiceTotalInfoProcedure,
		svc.TotalInfo,
		connect.WithSchema(blocksServiceMethods.ByName("TotalInfo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/eproxy.blocks.v2.BlocksService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BlocksServiceGetProcedure:
			blocksServiceGetHandler.ServeHTTP(w, r)
		case BlocksServiceFindProcedure:
			blocksServiceFindHandler.ServeHTTP(w, r)
		case BlocksServiceNodeLastBlockHeightProcedure:
			blocksServiceNodeLastBlockHeightHandler.ServeHTTP(w, r)
		case BlocksServiceLastBlockHeightProcedure:
			blocksServiceLastBlockHeightHandler.ServeHTTP(w, r)
		case BlocksServiceMinBlockHeightProcedure:
			blocksServiceMinBlockHeightHandler.ServeHTTP(w, r)
		case BlocksServiceSubscribeProcedure:
			blocksServiceSubscribeHandler.ServeHTTP(w, r)
		case BlocksServiceTotalInfoProcedure:
			blocksServiceTotalInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBlocksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBlocksServiceHandler struct{}

func (UnimplementedBlocksServiceHandler) Get(context.Context, *connect.Request[v2.GetRequest]) (*connect.Response[v2.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.blocks.v2.BlocksService.Get is not implemented"))
}

func (UnimplementedBlocksServiceHandler) Find(context.Context, *connect.Request[v2.FindRequest]) (*connect.Response[v2.FindResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.blocks.v2.BlocksService.Find is not implemented"))
}

func (UnimplementedBlocksServiceHandler) NodeLastBlockHeight(context.Context, *connect.Request[v2.NodeLastBlockHeightRequest]) (*connect.Response[v2.NodeLastBlockHeightResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.blocks.v2.BlocksService.NodeLastBlockHeight is not implemented"))
}

func (UnimplementedBlocksServiceHandler) LastBlockHeight(context.Context, *connect.Request[v2.LastBlockHeightRequest]) (*connect.Response[v2.LastBlockHeightResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.blocks.v2.BlocksService.LastBlockHeight is not implemented"))
}

func (UnimplementedBlocksServiceHandler) MinBlockHeight(context.Context, *connect.Request[v2.MinBlockHeightRequest]) (*connect.Response[v2.MinBlockHeightResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.blocks.v2.BlocksService.MinBlockHeight is not implemented"))
}

func (UnimplementedBlocksServiceHandler) Subscribe(context.Context, *connect.Request[v2.SubscribeRequest], *connect.ServerStream[v2.SubscribeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.blocks.v2.BlocksService.Subscribe is not implemented"))
}

func (UnimplementedBlocksServiceHandler) TotalInfo(context.Context, *connect.Request[v2.TotalInfoRequest]) (*connect.Response[v2.TotalInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.blocks.v2.BlocksService.TotalInfo is not implemented"))
}
