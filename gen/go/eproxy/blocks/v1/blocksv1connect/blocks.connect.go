// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// eproxy/blocks/v1/blocks.proto is a deprecated file.

package blocksv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dv-net/dv-proto/gen/go/eproxy/blocks/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BlocksServiceName is the fully-qualified name of the BlocksService service.
	BlocksServiceName = "eproxy.blocks.v1.BlocksService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BlocksServiceGetProcedure is the fully-qualified name of the BlocksService's Get RPC.
	BlocksServiceGetProcedure = "/eproxy.blocks.v1.BlocksService/Get"
	// BlocksServiceLastBlockNumberProcedure is the fully-qualified name of the BlocksService's
	// LastBlockNumber RPC.
	BlocksServiceLastBlockNumberProcedure = "/eproxy.blocks.v1.BlocksService/LastBlockNumber"
	// BlocksServiceMinBlockNumberProcedure is the fully-qualified name of the BlocksService's
	// MinBlockNumber RPC.
	BlocksServiceMinBlockNumberProcedure = "/eproxy.blocks.v1.BlocksService/MinBlockNumber"
	// BlocksServiceTotalInfoProcedure is the fully-qualified name of the BlocksService's TotalInfo RPC.
	BlocksServiceTotalInfoProcedure = "/eproxy.blocks.v1.BlocksService/TotalInfo"
)

// BlocksServiceClient is a client for the eproxy.blocks.v1.BlocksService service.
type BlocksServiceClient interface {
	// Get returns block info by height and blockchain
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	// LastBlockNumber returns last block number in blockchain
	LastBlockNumber(context.Context, *connect.Request[v1.LastBlockNumberRequest]) (*connect.Response[v1.LastBlockNumberResponse], error)
	// MinBlockNumber returns min block number in blockchain
	MinBlockNumber(context.Context, *connect.Request[v1.MinBlockNumberRequest]) (*connect.Response[v1.MinBlockNumberResponse], error)
	TotalInfo(context.Context, *connect.Request[v1.TotalInfoRequest]) (*connect.Response[v1.TotalInfoResponse], error)
}

// NewBlocksServiceClient constructs a client for the eproxy.blocks.v1.BlocksService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBlocksServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BlocksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	blocksServiceMethods := v1.File_eproxy_blocks_v1_blocks_proto.Services().ByName("BlocksService").Methods()
	return &blocksServiceClient{
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+BlocksServiceGetProcedure,
			connect.WithSchema(blocksServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		lastBlockNumber: connect.NewClient[v1.LastBlockNumberRequest, v1.LastBlockNumberResponse](
			httpClient,
			baseURL+BlocksServiceLastBlockNumberProcedure,
			connect.WithSchema(blocksServiceMethods.ByName("LastBlockNumber")),
			connect.WithClientOptions(opts...),
		),
		minBlockNumber: connect.NewClient[v1.MinBlockNumberRequest, v1.MinBlockNumberResponse](
			httpClient,
			baseURL+BlocksServiceMinBlockNumberProcedure,
			connect.WithSchema(blocksServiceMethods.ByName("MinBlockNumber")),
			connect.WithClientOptions(opts...),
		),
		totalInfo: connect.NewClient[v1.TotalInfoRequest, v1.TotalInfoResponse](
			httpClient,
			baseURL+BlocksServiceTotalInfoProcedure,
			connect.WithSchema(blocksServiceMethods.ByName("TotalInfo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// blocksServiceClient implements BlocksServiceClient.
type blocksServiceClient struct {
	get             *connect.Client[v1.GetRequest, v1.GetResponse]
	lastBlockNumber *connect.Client[v1.LastBlockNumberRequest, v1.LastBlockNumberResponse]
	minBlockNumber  *connect.Client[v1.MinBlockNumberRequest, v1.MinBlockNumberResponse]
	totalInfo       *connect.Client[v1.TotalInfoRequest, v1.TotalInfoResponse]
}

// Get calls eproxy.blocks.v1.BlocksService.Get.
func (c *blocksServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// LastBlockNumber calls eproxy.blocks.v1.BlocksService.LastBlockNumber.
func (c *blocksServiceClient) LastBlockNumber(ctx context.Context, req *connect.Request[v1.LastBlockNumberRequest]) (*connect.Response[v1.LastBlockNumberResponse], error) {
	return c.lastBlockNumber.CallUnary(ctx, req)
}

// MinBlockNumber calls eproxy.blocks.v1.BlocksService.MinBlockNumber.
func (c *blocksServiceClient) MinBlockNumber(ctx context.Context, req *connect.Request[v1.MinBlockNumberRequest]) (*connect.Response[v1.MinBlockNumberResponse], error) {
	return c.minBlockNumber.CallUnary(ctx, req)
}

// TotalInfo calls eproxy.blocks.v1.BlocksService.TotalInfo.
func (c *blocksServiceClient) TotalInfo(ctx context.Context, req *connect.Request[v1.TotalInfoRequest]) (*connect.Response[v1.TotalInfoResponse], error) {
	return c.totalInfo.CallUnary(ctx, req)
}

// BlocksServiceHandler is an implementation of the eproxy.blocks.v1.BlocksService service.
type BlocksServiceHandler interface {
	// Get returns block info by height and blockchain
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	// LastBlockNumber returns last block number in blockchain
	LastBlockNumber(context.Context, *connect.Request[v1.LastBlockNumberRequest]) (*connect.Response[v1.LastBlockNumberResponse], error)
	// MinBlockNumber returns min block number in blockchain
	MinBlockNumber(context.Context, *connect.Request[v1.MinBlockNumberRequest]) (*connect.Response[v1.MinBlockNumberResponse], error)
	TotalInfo(context.Context, *connect.Request[v1.TotalInfoRequest]) (*connect.Response[v1.TotalInfoResponse], error)
}

// NewBlocksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBlocksServiceHandler(svc BlocksServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	blocksServiceMethods := v1.File_eproxy_blocks_v1_blocks_proto.Services().ByName("BlocksService").Methods()
	blocksServiceGetHandler := connect.NewUnaryHandler(
		BlocksServiceGetProcedure,
		svc.Get,
		connect.WithSchema(blocksServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	blocksServiceLastBlockNumberHandler := connect.NewUnaryHandler(
		BlocksServiceLastBlockNumberProcedure,
		svc.LastBlockNumber,
		connect.WithSchema(blocksServiceMethods.ByName("LastBlockNumber")),
		connect.WithHandlerOptions(opts...),
	)
	blocksServiceMinBlockNumberHandler := connect.NewUnaryHandler(
		BlocksServiceMinBlockNumberProcedure,
		svc.MinBlockNumber,
		connect.WithSchema(blocksServiceMethods.ByName("MinBlockNumber")),
		connect.WithHandlerOptions(opts...),
	)
	blocksServiceTotalInfoHandler := connect.NewUnaryHandler(
		BlocksServiceTotalInfoProcedure,
		svc.TotalInfo,
		connect.WithSchema(blocksServiceMethods.ByName("TotalInfo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/eproxy.blocks.v1.BlocksService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BlocksServiceGetProcedure:
			blocksServiceGetHandler.ServeHTTP(w, r)
		case BlocksServiceLastBlockNumberProcedure:
			blocksServiceLastBlockNumberHandler.ServeHTTP(w, r)
		case BlocksServiceMinBlockNumberProcedure:
			blocksServiceMinBlockNumberHandler.ServeHTTP(w, r)
		case BlocksServiceTotalInfoProcedure:
			blocksServiceTotalInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBlocksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBlocksServiceHandler struct{}

func (UnimplementedBlocksServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.blocks.v1.BlocksService.Get is not implemented"))
}

func (UnimplementedBlocksServiceHandler) LastBlockNumber(context.Context, *connect.Request[v1.LastBlockNumberRequest]) (*connect.Response[v1.LastBlockNumberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.blocks.v1.BlocksService.LastBlockNumber is not implemented"))
}

func (UnimplementedBlocksServiceHandler) MinBlockNumber(context.Context, *connect.Request[v1.MinBlockNumberRequest]) (*connect.Response[v1.MinBlockNumberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.blocks.v1.BlocksService.MinBlockNumber is not implemented"))
}

func (UnimplementedBlocksServiceHandler) TotalInfo(context.Context, *connect.Request[v1.TotalInfoRequest]) (*connect.Response[v1.TotalInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eproxy.blocks.v1.BlocksService.TotalInfo is not implemented"))
}
