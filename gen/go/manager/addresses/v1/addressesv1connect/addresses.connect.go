// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: manager/addresses/v1/addresses.proto

package addressesv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dv-net/dv-proto/gen/go/manager/addresses/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AddressesServiceName is the fully-qualified name of the AddressesService service.
	AddressesServiceName = "manager.addresses.v1.AddressesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AddressesServiceGetAddressesListProcedure is the fully-qualified name of the AddressesService's
	// GetAddressesList RPC.
	AddressesServiceGetAddressesListProcedure = "/manager.addresses.v1.AddressesService/GetAddressesList"
)

// AddressesServiceClient is a client for the manager.addresses.v1.AddressesService service.
type AddressesServiceClient interface {
	// GetAddressesList retrieves a list of addresses.
	GetAddressesList(context.Context, *connect.Request[v1.GetAddressesListRequest]) (*connect.Response[v1.GetAddressesListResponse], error)
}

// NewAddressesServiceClient constructs a client for the manager.addresses.v1.AddressesService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAddressesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AddressesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	addressesServiceMethods := v1.File_manager_addresses_v1_addresses_proto.Services().ByName("AddressesService").Methods()
	return &addressesServiceClient{
		getAddressesList: connect.NewClient[v1.GetAddressesListRequest, v1.GetAddressesListResponse](
			httpClient,
			baseURL+AddressesServiceGetAddressesListProcedure,
			connect.WithSchema(addressesServiceMethods.ByName("GetAddressesList")),
			connect.WithClientOptions(opts...),
		),
	}
}

// addressesServiceClient implements AddressesServiceClient.
type addressesServiceClient struct {
	getAddressesList *connect.Client[v1.GetAddressesListRequest, v1.GetAddressesListResponse]
}

// GetAddressesList calls manager.addresses.v1.AddressesService.GetAddressesList.
func (c *addressesServiceClient) GetAddressesList(ctx context.Context, req *connect.Request[v1.GetAddressesListRequest]) (*connect.Response[v1.GetAddressesListResponse], error) {
	return c.getAddressesList.CallUnary(ctx, req)
}

// AddressesServiceHandler is an implementation of the manager.addresses.v1.AddressesService
// service.
type AddressesServiceHandler interface {
	// GetAddressesList retrieves a list of addresses.
	GetAddressesList(context.Context, *connect.Request[v1.GetAddressesListRequest]) (*connect.Response[v1.GetAddressesListResponse], error)
}

// NewAddressesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAddressesServiceHandler(svc AddressesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	addressesServiceMethods := v1.File_manager_addresses_v1_addresses_proto.Services().ByName("AddressesService").Methods()
	addressesServiceGetAddressesListHandler := connect.NewUnaryHandler(
		AddressesServiceGetAddressesListProcedure,
		svc.GetAddressesList,
		connect.WithSchema(addressesServiceMethods.ByName("GetAddressesList")),
		connect.WithHandlerOptions(opts...),
	)
	return "/manager.addresses.v1.AddressesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AddressesServiceGetAddressesListProcedure:
			addressesServiceGetAddressesListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAddressesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAddressesServiceHandler struct{}

func (UnimplementedAddressesServiceHandler) GetAddressesList(context.Context, *connect.Request[v1.GetAddressesListRequest]) (*connect.Response[v1.GetAddressesListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.addresses.v1.AddressesService.GetAddressesList is not implemented"))
}
