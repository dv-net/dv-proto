syntax = "proto3";
package eproxy.transactions.v1;

// Deprecated: Use v2 instead
option deprecated = true;


import "google/protobuf/timestamp.proto";
import "google/api/field_behavior.proto";
import "eproxy/common/v1/common.proto";

// TransactionsService returns information about transactions by hash and
// address
service TransactionsService {
  // Find returns information about transactions list by hash, address, block
  // height and contract address
  rpc Find(FindRequest) returns (FindResponse);
  // GetInfo returns data associated with hash on specific blockchain, mixing
  // database data with node data.
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse);
}

message GetInfoRequest {
  string hash = 1 [ (google.api.field_behavior) = REQUIRED ];
  common.v1.Blockchain blockchain = 2
      [ (google.api.field_behavior) = REQUIRED ];
}

message GetInfoResponse { TransactionInfo transaction_info = 1; }

message Event {
  // event type: transfer / delegate / reclaim
  optional string type = 1;
  optional bytes original_data = 2;
  optional bytes encoded_data = 3;
  optional string blockchain_uniq_key = 4;
  optional string asset_identify = 5;
  optional string address_from = 6;
  optional string address_to = 7;
  optional string value = 8;
}

message AddtitionalData {
  optional string status = 1;
  // Unique key for transaction in blockhain for the same hash, like sequence
  // for bitcoin inputs and outputs
  message TronData {
    optional uint32 contract_type = 1;
    optional string asset_type = 2;
  }
  optional TronData tron_data = 3;
}

message TransactionInfo {
  string hash = 1;
  uint64 block_height = 2;
  uint64 confirmations = 3;
  optional string address_from = 4;
  optional string address_to = 5;
  optional string value = 6;
  optional string fee = 7;
  optional string asset_identify = 8;
  uint32 index = 9;
  AdditionalDataFull additional_data_full = 10;
  repeated Event events = 11;
  google.protobuf.Timestamp created_at = 12;
  bool in_mempool = 13;
}

message AdditionalDataFull {
  optional string status = 1;
  message BitcoinLikeData {
    string hex = 1;
    string hash = 2;
    uint32 size = 3;
    uint32 v_size = 4;
    uint32 weight = 5;
    uint32 version = 6;
    uint32 lock_time = 7;
    bool is_coinbase = 8;
  }
  message EthereumData {
    int32 chain_id = 1;
    int32 txn_type = 2;
    int64 gas = 3;
    int64 gas_price = 4;
    int64 gas_used = 5;
    int64 max_fee_per_gas = 6;
    int64 max_priority_fee_per_gas = 7;
    int64 cumulative_gas_used = 8;
    int64 effective_gas_price = 9;
    int64 nonce = 10;
    bytes v = 11;
    bytes r = 12;
    bytes s = 13;
  }
  message TronData {
    optional string energy_usage = 1;
    optional string energy_fee = 2;
    optional string origin_energy_usage = 3;
    optional string energy_usage_total = 4;
    optional string net_usage = 5;
    optional string net_fee = 6;
    optional string energy_penalty_total = 7;
    optional string withdraw_amount = 8;
    optional string unfreeze_amount = 9;
    optional string withdraw_expire_amount = 10;
    optional string resource_contract_type = 11;
    optional string resource_type = 12;
    optional string resource_value = 13;
    optional string stacked_trx = 14;
  }
  optional BitcoinLikeData bitcoin_like_data = 2;
  optional EthereumData ethereum_data = 3;
  optional TronData tron_data = 4;
}

message Transaction {
  string hash = 1;
  uint64 block_height = 2;
  uint64 confirmations = 3;
  optional string address_from = 4;
  optional string address_to = 5;
  optional string value = 6;
  optional string fee = 7;
  optional string asset_identify = 8;
  uint32 index = 9;
  AddtitionalData additional_data = 10;
  repeated Event events = 11;
  google.protobuf.Timestamp created_at = 12;
  bool in_mempool = 13;
}

// Find request
message FindRequest {
  eproxy.common.v1.Blockchain blockchain = 1
      [ (google.api.field_behavior) = REQUIRED ];
  eproxy.common.v1.Pagination pagination = 2
      [ (google.api.field_behavior) = REQUIRED ];
  optional string search = 3;
  optional string hash = 4;
  optional uint64 block_height = 5;
  optional string address = 6;
  optional string asset_identify = 7;
  message BitcoinParams {
    optional bool filter_by_address = 1;
    optional bool filter_by_mempool = 2;
  }
  optional BitcoinParams bitcoin_params = 8;
  message TronParams {
    optional uint32 contract_type = 1;
    optional bool is_internal = 2;
    bool is_include_detail_info = 3;
  }
  optional TronParams tron_params = 9;
  message LitecoinParams {
    optional bool filter_by_address = 1;
    optional bool filter_by_mempool = 2;
  }
  optional LitecoinParams litecoin_params = 10;
}

message FindResponse {
  repeated Transaction items = 1;
  bool next_page_exists = 2;
}
